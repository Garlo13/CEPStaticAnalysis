/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.Select;
import org.xtext.example.mydsl.esper.SelectAttributesDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Select</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SelectImpl#getSelectAttributes <em>Select Attributes</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SelectImpl#getAlias <em>Alias</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SelectImpl#isAsterisk <em>Asterisk</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SelectImpl extends MinimalEObjectImpl.Container implements Select
{
  /**
   * The cached value of the '{@link #getSelectAttributes() <em>Select Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectAttributes()
   * @generated
   * @ordered
   */
  protected EList<SelectAttributesDefinition> selectAttributes;

  /**
   * The cached value of the '{@link #getAlias() <em>Alias</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlias()
   * @generated
   * @ordered
   */
  protected EList<String> alias;

  /**
   * The default value of the '{@link #isAsterisk() <em>Asterisk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsterisk()
   * @generated
   * @ordered
   */
  protected static final boolean ASTERISK_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAsterisk() <em>Asterisk</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsterisk()
   * @generated
   * @ordered
   */
  protected boolean asterisk = ASTERISK_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SelectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.SELECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SelectAttributesDefinition> getSelectAttributes()
  {
    if (selectAttributes == null)
    {
      selectAttributes = new EObjectContainmentEList<SelectAttributesDefinition>(SelectAttributesDefinition.class, this, EsperPackage.SELECT__SELECT_ATTRIBUTES);
    }
    return selectAttributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getAlias()
  {
    if (alias == null)
    {
      alias = new EDataTypeEList<String>(String.class, this, EsperPackage.SELECT__ALIAS);
    }
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAsterisk()
  {
    return asterisk;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAsterisk(boolean newAsterisk)
  {
    boolean oldAsterisk = asterisk;
    asterisk = newAsterisk;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.SELECT__ASTERISK, oldAsterisk, asterisk));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.SELECT__SELECT_ATTRIBUTES:
        return ((InternalEList<?>)getSelectAttributes()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.SELECT__SELECT_ATTRIBUTES:
        return getSelectAttributes();
      case EsperPackage.SELECT__ALIAS:
        return getAlias();
      case EsperPackage.SELECT__ASTERISK:
        return isAsterisk();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.SELECT__SELECT_ATTRIBUTES:
        getSelectAttributes().clear();
        getSelectAttributes().addAll((Collection<? extends SelectAttributesDefinition>)newValue);
        return;
      case EsperPackage.SELECT__ALIAS:
        getAlias().clear();
        getAlias().addAll((Collection<? extends String>)newValue);
        return;
      case EsperPackage.SELECT__ASTERISK:
        setAsterisk((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.SELECT__SELECT_ATTRIBUTES:
        getSelectAttributes().clear();
        return;
      case EsperPackage.SELECT__ALIAS:
        getAlias().clear();
        return;
      case EsperPackage.SELECT__ASTERISK:
        setAsterisk(ASTERISK_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.SELECT__SELECT_ATTRIBUTES:
        return selectAttributes != null && !selectAttributes.isEmpty();
      case EsperPackage.SELECT__ALIAS:
        return alias != null && !alias.isEmpty();
      case EsperPackage.SELECT__ASTERISK:
        return asterisk != ASTERISK_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (alias: ");
    result.append(alias);
    result.append(", asterisk: ");
    result.append(asterisk);
    result.append(')');
    return result.toString();
  }

} //SelectImpl
