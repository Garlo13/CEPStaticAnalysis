/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.FollowBy;
import org.xtext.example.mydsl.esper.SingleDefinition;
import org.xtext.example.mydsl.esper.TerminalExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminal Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.TerminalExpressionImpl#isEvery <em>Every</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.TerminalExpressionImpl#getEveryExpression <em>Every Expression</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.TerminalExpressionImpl#isParenthesis <em>Parenthesis</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.TerminalExpressionImpl#getBetweenParenthesis <em>Between Parenthesis</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.TerminalExpressionImpl#getSingleDefinition <em>Single Definition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminalExpressionImpl extends MinimalEObjectImpl.Container implements TerminalExpression
{
  /**
   * The default value of the '{@link #isEvery() <em>Every</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEvery()
   * @generated
   * @ordered
   */
  protected static final boolean EVERY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEvery() <em>Every</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEvery()
   * @generated
   * @ordered
   */
  protected boolean every = EVERY_EDEFAULT;

  /**
   * The cached value of the '{@link #getEveryExpression() <em>Every Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEveryExpression()
   * @generated
   * @ordered
   */
  protected FollowBy everyExpression;

  /**
   * The default value of the '{@link #isParenthesis() <em>Parenthesis</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isParenthesis()
   * @generated
   * @ordered
   */
  protected static final boolean PARENTHESIS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isParenthesis() <em>Parenthesis</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isParenthesis()
   * @generated
   * @ordered
   */
  protected boolean parenthesis = PARENTHESIS_EDEFAULT;

  /**
   * The cached value of the '{@link #getBetweenParenthesis() <em>Between Parenthesis</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBetweenParenthesis()
   * @generated
   * @ordered
   */
  protected FollowBy betweenParenthesis;

  /**
   * The cached value of the '{@link #getSingleDefinition() <em>Single Definition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSingleDefinition()
   * @generated
   * @ordered
   */
  protected SingleDefinition singleDefinition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TerminalExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.TERMINAL_EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isEvery()
  {
    return every;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEvery(boolean newEvery)
  {
    boolean oldEvery = every;
    every = newEvery;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__EVERY, oldEvery, every));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FollowBy getEveryExpression()
  {
    return everyExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEveryExpression(FollowBy newEveryExpression, NotificationChain msgs)
  {
    FollowBy oldEveryExpression = everyExpression;
    everyExpression = newEveryExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION, oldEveryExpression, newEveryExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEveryExpression(FollowBy newEveryExpression)
  {
    if (newEveryExpression != everyExpression)
    {
      NotificationChain msgs = null;
      if (everyExpression != null)
        msgs = ((InternalEObject)everyExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION, null, msgs);
      if (newEveryExpression != null)
        msgs = ((InternalEObject)newEveryExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION, null, msgs);
      msgs = basicSetEveryExpression(newEveryExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION, newEveryExpression, newEveryExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isParenthesis()
  {
    return parenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParenthesis(boolean newParenthesis)
  {
    boolean oldParenthesis = parenthesis;
    parenthesis = newParenthesis;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__PARENTHESIS, oldParenthesis, parenthesis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FollowBy getBetweenParenthesis()
  {
    return betweenParenthesis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBetweenParenthesis(FollowBy newBetweenParenthesis, NotificationChain msgs)
  {
    FollowBy oldBetweenParenthesis = betweenParenthesis;
    betweenParenthesis = newBetweenParenthesis;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS, oldBetweenParenthesis, newBetweenParenthesis);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBetweenParenthesis(FollowBy newBetweenParenthesis)
  {
    if (newBetweenParenthesis != betweenParenthesis)
    {
      NotificationChain msgs = null;
      if (betweenParenthesis != null)
        msgs = ((InternalEObject)betweenParenthesis).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS, null, msgs);
      if (newBetweenParenthesis != null)
        msgs = ((InternalEObject)newBetweenParenthesis).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS, null, msgs);
      msgs = basicSetBetweenParenthesis(newBetweenParenthesis, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS, newBetweenParenthesis, newBetweenParenthesis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SingleDefinition getSingleDefinition()
  {
    return singleDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSingleDefinition(SingleDefinition newSingleDefinition, NotificationChain msgs)
  {
    SingleDefinition oldSingleDefinition = singleDefinition;
    singleDefinition = newSingleDefinition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION, oldSingleDefinition, newSingleDefinition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSingleDefinition(SingleDefinition newSingleDefinition)
  {
    if (newSingleDefinition != singleDefinition)
    {
      NotificationChain msgs = null;
      if (singleDefinition != null)
        msgs = ((InternalEObject)singleDefinition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION, null, msgs);
      if (newSingleDefinition != null)
        msgs = ((InternalEObject)newSingleDefinition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION, null, msgs);
      msgs = basicSetSingleDefinition(newSingleDefinition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION, newSingleDefinition, newSingleDefinition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION:
        return basicSetEveryExpression(null, msgs);
      case EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS:
        return basicSetBetweenParenthesis(null, msgs);
      case EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION:
        return basicSetSingleDefinition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.TERMINAL_EXPRESSION__EVERY:
        return isEvery();
      case EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION:
        return getEveryExpression();
      case EsperPackage.TERMINAL_EXPRESSION__PARENTHESIS:
        return isParenthesis();
      case EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS:
        return getBetweenParenthesis();
      case EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION:
        return getSingleDefinition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.TERMINAL_EXPRESSION__EVERY:
        setEvery((Boolean)newValue);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION:
        setEveryExpression((FollowBy)newValue);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__PARENTHESIS:
        setParenthesis((Boolean)newValue);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS:
        setBetweenParenthesis((FollowBy)newValue);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION:
        setSingleDefinition((SingleDefinition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.TERMINAL_EXPRESSION__EVERY:
        setEvery(EVERY_EDEFAULT);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION:
        setEveryExpression((FollowBy)null);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__PARENTHESIS:
        setParenthesis(PARENTHESIS_EDEFAULT);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS:
        setBetweenParenthesis((FollowBy)null);
        return;
      case EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION:
        setSingleDefinition((SingleDefinition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.TERMINAL_EXPRESSION__EVERY:
        return every != EVERY_EDEFAULT;
      case EsperPackage.TERMINAL_EXPRESSION__EVERY_EXPRESSION:
        return everyExpression != null;
      case EsperPackage.TERMINAL_EXPRESSION__PARENTHESIS:
        return parenthesis != PARENTHESIS_EDEFAULT;
      case EsperPackage.TERMINAL_EXPRESSION__BETWEEN_PARENTHESIS:
        return betweenParenthesis != null;
      case EsperPackage.TERMINAL_EXPRESSION__SINGLE_DEFINITION:
        return singleDefinition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (every: ");
    result.append(every);
    result.append(", parenthesis: ");
    result.append(parenthesis);
    result.append(')');
    return result.toString();
  }

} //TerminalExpressionImpl
