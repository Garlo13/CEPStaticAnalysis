/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.From;
import org.xtext.example.mydsl.esper.GroupBy;
import org.xtext.example.mydsl.esper.Having;
import org.xtext.example.mydsl.esper.Insert;
import org.xtext.example.mydsl.esper.Name;
import org.xtext.example.mydsl.esper.Priority;
import org.xtext.example.mydsl.esper.RuleParts;
import org.xtext.example.mydsl.esper.Select;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule Parts</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getNameRule <em>Name Rule</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getInsert <em>Insert</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getPriority <em>Priority</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getSelectRule <em>Select Rule</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getFromRule <em>From Rule</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getGroupBy <em>Group By</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.RulePartsImpl#getHaving <em>Having</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RulePartsImpl extends MinimalEObjectImpl.Container implements RuleParts
{
  /**
   * The cached value of the '{@link #getNameRule() <em>Name Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameRule()
   * @generated
   * @ordered
   */
  protected Name nameRule;

  /**
   * The cached value of the '{@link #getInsert() <em>Insert</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInsert()
   * @generated
   * @ordered
   */
  protected Insert insert;

  /**
   * The cached value of the '{@link #getPriority() <em>Priority</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPriority()
   * @generated
   * @ordered
   */
  protected Priority priority;

  /**
   * The cached value of the '{@link #getSelectRule() <em>Select Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSelectRule()
   * @generated
   * @ordered
   */
  protected Select selectRule;

  /**
   * The cached value of the '{@link #getFromRule() <em>From Rule</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromRule()
   * @generated
   * @ordered
   */
  protected From fromRule;

  /**
   * The cached value of the '{@link #getGroupBy() <em>Group By</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGroupBy()
   * @generated
   * @ordered
   */
  protected GroupBy groupBy;

  /**
   * The cached value of the '{@link #getHaving() <em>Having</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHaving()
   * @generated
   * @ordered
   */
  protected Having having;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RulePartsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.RULE_PARTS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Name getNameRule()
  {
    return nameRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNameRule(Name newNameRule, NotificationChain msgs)
  {
    Name oldNameRule = nameRule;
    nameRule = newNameRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__NAME_RULE, oldNameRule, newNameRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNameRule(Name newNameRule)
  {
    if (newNameRule != nameRule)
    {
      NotificationChain msgs = null;
      if (nameRule != null)
        msgs = ((InternalEObject)nameRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__NAME_RULE, null, msgs);
      if (newNameRule != null)
        msgs = ((InternalEObject)newNameRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__NAME_RULE, null, msgs);
      msgs = basicSetNameRule(newNameRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__NAME_RULE, newNameRule, newNameRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Insert getInsert()
  {
    return insert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInsert(Insert newInsert, NotificationChain msgs)
  {
    Insert oldInsert = insert;
    insert = newInsert;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__INSERT, oldInsert, newInsert);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInsert(Insert newInsert)
  {
    if (newInsert != insert)
    {
      NotificationChain msgs = null;
      if (insert != null)
        msgs = ((InternalEObject)insert).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__INSERT, null, msgs);
      if (newInsert != null)
        msgs = ((InternalEObject)newInsert).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__INSERT, null, msgs);
      msgs = basicSetInsert(newInsert, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__INSERT, newInsert, newInsert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Priority getPriority()
  {
    return priority;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPriority(Priority newPriority, NotificationChain msgs)
  {
    Priority oldPriority = priority;
    priority = newPriority;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__PRIORITY, oldPriority, newPriority);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPriority(Priority newPriority)
  {
    if (newPriority != priority)
    {
      NotificationChain msgs = null;
      if (priority != null)
        msgs = ((InternalEObject)priority).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__PRIORITY, null, msgs);
      if (newPriority != null)
        msgs = ((InternalEObject)newPriority).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__PRIORITY, null, msgs);
      msgs = basicSetPriority(newPriority, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__PRIORITY, newPriority, newPriority));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Select getSelectRule()
  {
    return selectRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSelectRule(Select newSelectRule, NotificationChain msgs)
  {
    Select oldSelectRule = selectRule;
    selectRule = newSelectRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__SELECT_RULE, oldSelectRule, newSelectRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSelectRule(Select newSelectRule)
  {
    if (newSelectRule != selectRule)
    {
      NotificationChain msgs = null;
      if (selectRule != null)
        msgs = ((InternalEObject)selectRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__SELECT_RULE, null, msgs);
      if (newSelectRule != null)
        msgs = ((InternalEObject)newSelectRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__SELECT_RULE, null, msgs);
      msgs = basicSetSelectRule(newSelectRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__SELECT_RULE, newSelectRule, newSelectRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public From getFromRule()
  {
    return fromRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFromRule(From newFromRule, NotificationChain msgs)
  {
    From oldFromRule = fromRule;
    fromRule = newFromRule;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__FROM_RULE, oldFromRule, newFromRule);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFromRule(From newFromRule)
  {
    if (newFromRule != fromRule)
    {
      NotificationChain msgs = null;
      if (fromRule != null)
        msgs = ((InternalEObject)fromRule).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__FROM_RULE, null, msgs);
      if (newFromRule != null)
        msgs = ((InternalEObject)newFromRule).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__FROM_RULE, null, msgs);
      msgs = basicSetFromRule(newFromRule, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__FROM_RULE, newFromRule, newFromRule));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GroupBy getGroupBy()
  {
    return groupBy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGroupBy(GroupBy newGroupBy, NotificationChain msgs)
  {
    GroupBy oldGroupBy = groupBy;
    groupBy = newGroupBy;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__GROUP_BY, oldGroupBy, newGroupBy);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setGroupBy(GroupBy newGroupBy)
  {
    if (newGroupBy != groupBy)
    {
      NotificationChain msgs = null;
      if (groupBy != null)
        msgs = ((InternalEObject)groupBy).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__GROUP_BY, null, msgs);
      if (newGroupBy != null)
        msgs = ((InternalEObject)newGroupBy).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__GROUP_BY, null, msgs);
      msgs = basicSetGroupBy(newGroupBy, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__GROUP_BY, newGroupBy, newGroupBy));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Having getHaving()
  {
    return having;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHaving(Having newHaving, NotificationChain msgs)
  {
    Having oldHaving = having;
    having = newHaving;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__HAVING, oldHaving, newHaving);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setHaving(Having newHaving)
  {
    if (newHaving != having)
    {
      NotificationChain msgs = null;
      if (having != null)
        msgs = ((InternalEObject)having).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__HAVING, null, msgs);
      if (newHaving != null)
        msgs = ((InternalEObject)newHaving).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.RULE_PARTS__HAVING, null, msgs);
      msgs = basicSetHaving(newHaving, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.RULE_PARTS__HAVING, newHaving, newHaving));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.RULE_PARTS__NAME_RULE:
        return basicSetNameRule(null, msgs);
      case EsperPackage.RULE_PARTS__INSERT:
        return basicSetInsert(null, msgs);
      case EsperPackage.RULE_PARTS__PRIORITY:
        return basicSetPriority(null, msgs);
      case EsperPackage.RULE_PARTS__SELECT_RULE:
        return basicSetSelectRule(null, msgs);
      case EsperPackage.RULE_PARTS__FROM_RULE:
        return basicSetFromRule(null, msgs);
      case EsperPackage.RULE_PARTS__GROUP_BY:
        return basicSetGroupBy(null, msgs);
      case EsperPackage.RULE_PARTS__HAVING:
        return basicSetHaving(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.RULE_PARTS__NAME_RULE:
        return getNameRule();
      case EsperPackage.RULE_PARTS__INSERT:
        return getInsert();
      case EsperPackage.RULE_PARTS__PRIORITY:
        return getPriority();
      case EsperPackage.RULE_PARTS__SELECT_RULE:
        return getSelectRule();
      case EsperPackage.RULE_PARTS__FROM_RULE:
        return getFromRule();
      case EsperPackage.RULE_PARTS__GROUP_BY:
        return getGroupBy();
      case EsperPackage.RULE_PARTS__HAVING:
        return getHaving();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.RULE_PARTS__NAME_RULE:
        setNameRule((Name)newValue);
        return;
      case EsperPackage.RULE_PARTS__INSERT:
        setInsert((Insert)newValue);
        return;
      case EsperPackage.RULE_PARTS__PRIORITY:
        setPriority((Priority)newValue);
        return;
      case EsperPackage.RULE_PARTS__SELECT_RULE:
        setSelectRule((Select)newValue);
        return;
      case EsperPackage.RULE_PARTS__FROM_RULE:
        setFromRule((From)newValue);
        return;
      case EsperPackage.RULE_PARTS__GROUP_BY:
        setGroupBy((GroupBy)newValue);
        return;
      case EsperPackage.RULE_PARTS__HAVING:
        setHaving((Having)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.RULE_PARTS__NAME_RULE:
        setNameRule((Name)null);
        return;
      case EsperPackage.RULE_PARTS__INSERT:
        setInsert((Insert)null);
        return;
      case EsperPackage.RULE_PARTS__PRIORITY:
        setPriority((Priority)null);
        return;
      case EsperPackage.RULE_PARTS__SELECT_RULE:
        setSelectRule((Select)null);
        return;
      case EsperPackage.RULE_PARTS__FROM_RULE:
        setFromRule((From)null);
        return;
      case EsperPackage.RULE_PARTS__GROUP_BY:
        setGroupBy((GroupBy)null);
        return;
      case EsperPackage.RULE_PARTS__HAVING:
        setHaving((Having)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.RULE_PARTS__NAME_RULE:
        return nameRule != null;
      case EsperPackage.RULE_PARTS__INSERT:
        return insert != null;
      case EsperPackage.RULE_PARTS__PRIORITY:
        return priority != null;
      case EsperPackage.RULE_PARTS__SELECT_RULE:
        return selectRule != null;
      case EsperPackage.RULE_PARTS__FROM_RULE:
        return fromRule != null;
      case EsperPackage.RULE_PARTS__GROUP_BY:
        return groupBy != null;
      case EsperPackage.RULE_PARTS__HAVING:
        return having != null;
    }
    return super.eIsSet(featureID);
  }

} //RulePartsImpl
