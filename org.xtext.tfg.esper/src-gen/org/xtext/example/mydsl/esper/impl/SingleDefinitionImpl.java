/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper.Anything;
import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.KindOfEvent;
import org.xtext.example.mydsl.esper.SingleDefinition;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Single Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SingleDefinitionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SingleDefinitionImpl#getSimpleEvents <em>Simple Events</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.SingleDefinitionImpl#getAnything <em>Anything</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SingleDefinitionImpl extends MinimalEObjectImpl.Container implements SingleDefinition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getSimpleEvents() <em>Simple Events</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpleEvents()
   * @generated
   * @ordered
   */
  protected KindOfEvent simpleEvents;

  /**
   * The cached value of the '{@link #getAnything() <em>Anything</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnything()
   * @generated
   * @ordered
   */
  protected Anything anything;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SingleDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.SINGLE_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.SINGLE_DEFINITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KindOfEvent getSimpleEvents()
  {
    if (simpleEvents != null && simpleEvents.eIsProxy())
    {
      InternalEObject oldSimpleEvents = (InternalEObject)simpleEvents;
      simpleEvents = (KindOfEvent)eResolveProxy(oldSimpleEvents);
      if (simpleEvents != oldSimpleEvents)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS, oldSimpleEvents, simpleEvents));
      }
    }
    return simpleEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public KindOfEvent basicGetSimpleEvents()
  {
    return simpleEvents;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimpleEvents(KindOfEvent newSimpleEvents)
  {
    KindOfEvent oldSimpleEvents = simpleEvents;
    simpleEvents = newSimpleEvents;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS, oldSimpleEvents, simpleEvents));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Anything getAnything()
  {
    return anything;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnything(Anything newAnything, NotificationChain msgs)
  {
    Anything oldAnything = anything;
    anything = newAnything;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.SINGLE_DEFINITION__ANYTHING, oldAnything, newAnything);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnything(Anything newAnything)
  {
    if (newAnything != anything)
    {
      NotificationChain msgs = null;
      if (anything != null)
        msgs = ((InternalEObject)anything).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.SINGLE_DEFINITION__ANYTHING, null, msgs);
      if (newAnything != null)
        msgs = ((InternalEObject)newAnything).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.SINGLE_DEFINITION__ANYTHING, null, msgs);
      msgs = basicSetAnything(newAnything, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.SINGLE_DEFINITION__ANYTHING, newAnything, newAnything));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.SINGLE_DEFINITION__ANYTHING:
        return basicSetAnything(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.SINGLE_DEFINITION__NAME:
        return getName();
      case EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS:
        if (resolve) return getSimpleEvents();
        return basicGetSimpleEvents();
      case EsperPackage.SINGLE_DEFINITION__ANYTHING:
        return getAnything();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.SINGLE_DEFINITION__NAME:
        setName((String)newValue);
        return;
      case EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS:
        setSimpleEvents((KindOfEvent)newValue);
        return;
      case EsperPackage.SINGLE_DEFINITION__ANYTHING:
        setAnything((Anything)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.SINGLE_DEFINITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS:
        setSimpleEvents((KindOfEvent)null);
        return;
      case EsperPackage.SINGLE_DEFINITION__ANYTHING:
        setAnything((Anything)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.SINGLE_DEFINITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case EsperPackage.SINGLE_DEFINITION__SIMPLE_EVENTS:
        return simpleEvents != null;
      case EsperPackage.SINGLE_DEFINITION__ANYTHING:
        return anything != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //SingleDefinitionImpl
