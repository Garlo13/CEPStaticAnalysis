/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.FollowBy;
import org.xtext.example.mydsl.esper.TerminalExpression;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Follow By</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.FollowByImpl#getLeftSide <em>Left Side</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.FollowByImpl#getRightSide <em>Right Side</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FollowByImpl extends MinimalEObjectImpl.Container implements FollowBy
{
  /**
   * The cached value of the '{@link #getLeftSide() <em>Left Side</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftSide()
   * @generated
   * @ordered
   */
  protected TerminalExpression leftSide;

  /**
   * The cached value of the '{@link #getRightSide() <em>Right Side</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightSide()
   * @generated
   * @ordered
   */
  protected EList<TerminalExpression> rightSide;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FollowByImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.FOLLOW_BY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TerminalExpression getLeftSide()
  {
    return leftSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftSide(TerminalExpression newLeftSide, NotificationChain msgs)
  {
    TerminalExpression oldLeftSide = leftSide;
    leftSide = newLeftSide;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.FOLLOW_BY__LEFT_SIDE, oldLeftSide, newLeftSide);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftSide(TerminalExpression newLeftSide)
  {
    if (newLeftSide != leftSide)
    {
      NotificationChain msgs = null;
      if (leftSide != null)
        msgs = ((InternalEObject)leftSide).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.FOLLOW_BY__LEFT_SIDE, null, msgs);
      if (newLeftSide != null)
        msgs = ((InternalEObject)newLeftSide).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.FOLLOW_BY__LEFT_SIDE, null, msgs);
      msgs = basicSetLeftSide(newLeftSide, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.FOLLOW_BY__LEFT_SIDE, newLeftSide, newLeftSide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TerminalExpression> getRightSide()
  {
    if (rightSide == null)
    {
      rightSide = new EObjectContainmentEList<TerminalExpression>(TerminalExpression.class, this, EsperPackage.FOLLOW_BY__RIGHT_SIDE);
    }
    return rightSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.FOLLOW_BY__LEFT_SIDE:
        return basicSetLeftSide(null, msgs);
      case EsperPackage.FOLLOW_BY__RIGHT_SIDE:
        return ((InternalEList<?>)getRightSide()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.FOLLOW_BY__LEFT_SIDE:
        return getLeftSide();
      case EsperPackage.FOLLOW_BY__RIGHT_SIDE:
        return getRightSide();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.FOLLOW_BY__LEFT_SIDE:
        setLeftSide((TerminalExpression)newValue);
        return;
      case EsperPackage.FOLLOW_BY__RIGHT_SIDE:
        getRightSide().clear();
        getRightSide().addAll((Collection<? extends TerminalExpression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.FOLLOW_BY__LEFT_SIDE:
        setLeftSide((TerminalExpression)null);
        return;
      case EsperPackage.FOLLOW_BY__RIGHT_SIDE:
        getRightSide().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.FOLLOW_BY__LEFT_SIDE:
        return leftSide != null;
      case EsperPackage.FOLLOW_BY__RIGHT_SIDE:
        return rightSide != null && !rightSide.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //FollowByImpl
