/**
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.esper.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.esper.Anything;
import org.xtext.example.mydsl.esper.DefaultMethods;
import org.xtext.example.mydsl.esper.EsperPackage;
import org.xtext.example.mydsl.esper.Having;
import org.xtext.example.mydsl.esper.Operators;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Having</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.HavingImpl#getDefaultMethod <em>Default Method</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.HavingImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.esper.impl.HavingImpl#getAnything <em>Anything</em>}</li>
 * </ul>
 *
 * @generated
 */
public class HavingImpl extends MinimalEObjectImpl.Container implements Having
{
  /**
   * The cached value of the '{@link #getDefaultMethod() <em>Default Method</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultMethod()
   * @generated
   * @ordered
   */
  protected DefaultMethods defaultMethod;

  /**
   * The default value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected static final Operators OPERATOR_EDEFAULT = Operators.EQUAL;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected Operators operator = OPERATOR_EDEFAULT;

  /**
   * The cached value of the '{@link #getAnything() <em>Anything</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnything()
   * @generated
   * @ordered
   */
  protected Anything anything;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected HavingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EsperPackage.Literals.HAVING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DefaultMethods getDefaultMethod()
  {
    return defaultMethod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultMethod(DefaultMethods newDefaultMethod, NotificationChain msgs)
  {
    DefaultMethods oldDefaultMethod = defaultMethod;
    defaultMethod = newDefaultMethod;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.HAVING__DEFAULT_METHOD, oldDefaultMethod, newDefaultMethod);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDefaultMethod(DefaultMethods newDefaultMethod)
  {
    if (newDefaultMethod != defaultMethod)
    {
      NotificationChain msgs = null;
      if (defaultMethod != null)
        msgs = ((InternalEObject)defaultMethod).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.HAVING__DEFAULT_METHOD, null, msgs);
      if (newDefaultMethod != null)
        msgs = ((InternalEObject)newDefaultMethod).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.HAVING__DEFAULT_METHOD, null, msgs);
      msgs = basicSetDefaultMethod(newDefaultMethod, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.HAVING__DEFAULT_METHOD, newDefaultMethod, newDefaultMethod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Operators getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperator(Operators newOperator)
  {
    Operators oldOperator = operator;
    operator = newOperator == null ? OPERATOR_EDEFAULT : newOperator;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.HAVING__OPERATOR, oldOperator, operator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Anything getAnything()
  {
    return anything;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnything(Anything newAnything, NotificationChain msgs)
  {
    Anything oldAnything = anything;
    anything = newAnything;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsperPackage.HAVING__ANYTHING, oldAnything, newAnything);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnything(Anything newAnything)
  {
    if (newAnything != anything)
    {
      NotificationChain msgs = null;
      if (anything != null)
        msgs = ((InternalEObject)anything).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsperPackage.HAVING__ANYTHING, null, msgs);
      if (newAnything != null)
        msgs = ((InternalEObject)newAnything).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsperPackage.HAVING__ANYTHING, null, msgs);
      msgs = basicSetAnything(newAnything, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EsperPackage.HAVING__ANYTHING, newAnything, newAnything));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EsperPackage.HAVING__DEFAULT_METHOD:
        return basicSetDefaultMethod(null, msgs);
      case EsperPackage.HAVING__ANYTHING:
        return basicSetAnything(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EsperPackage.HAVING__DEFAULT_METHOD:
        return getDefaultMethod();
      case EsperPackage.HAVING__OPERATOR:
        return getOperator();
      case EsperPackage.HAVING__ANYTHING:
        return getAnything();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EsperPackage.HAVING__DEFAULT_METHOD:
        setDefaultMethod((DefaultMethods)newValue);
        return;
      case EsperPackage.HAVING__OPERATOR:
        setOperator((Operators)newValue);
        return;
      case EsperPackage.HAVING__ANYTHING:
        setAnything((Anything)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.HAVING__DEFAULT_METHOD:
        setDefaultMethod((DefaultMethods)null);
        return;
      case EsperPackage.HAVING__OPERATOR:
        setOperator(OPERATOR_EDEFAULT);
        return;
      case EsperPackage.HAVING__ANYTHING:
        setAnything((Anything)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EsperPackage.HAVING__DEFAULT_METHOD:
        return defaultMethod != null;
      case EsperPackage.HAVING__OPERATOR:
        return operator != OPERATOR_EDEFAULT;
      case EsperPackage.HAVING__ANYTHING:
        return anything != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (operator: ");
    result.append(operator);
    result.append(')');
    return result.toString();
  }

} //HavingImpl
