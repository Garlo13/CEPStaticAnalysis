/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.mydsl.services.EsperGrammarAccess;

@SuppressWarnings("all")
public class EsperSyntacticSequencer extends AbstractSyntacticSequencer {

	protected EsperGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Anything___ANY_OTHERTerminalRuleCall_1_0_7_or_FullStopKeyword_1_0_3_or_IDTerminalRuleCall_1_0_0_or_INTTerminalRuleCall_1_0_1_or_STRINGTerminalRuleCall_1_0_2_or_WhereKeyword_1_0_6__a;
	protected AbstractElementAlias match_FollowByWhere_LeftParenthesisKeyword_0_0_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (EsperGrammarAccess) access;
		match_Anything___ANY_OTHERTerminalRuleCall_1_0_7_or_FullStopKeyword_1_0_3_or_IDTerminalRuleCall_1_0_0_or_INTTerminalRuleCall_1_0_1_or_STRINGTerminalRuleCall_1_0_2_or_WhereKeyword_1_0_6__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getAnythingAccess().getANY_OTHERTerminalRuleCall_1_0_7()), new TokenAlias(false, false, grammarAccess.getAnythingAccess().getFullStopKeyword_1_0_3()), new TokenAlias(false, false, grammarAccess.getAnythingAccess().getIDTerminalRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getAnythingAccess().getINTTerminalRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getAnythingAccess().getSTRINGTerminalRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getAnythingAccess().getWhereKeyword_1_0_6()));
		match_FollowByWhere_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getFollowByWhereAccess().getLeftParenthesisKeyword_0_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getANY_OTHERRule())
			return getANY_OTHERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ANY_OTHER: .;
	 */
	protected String getANY_OTHERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Anything___ANY_OTHERTerminalRuleCall_1_0_7_or_FullStopKeyword_1_0_3_or_IDTerminalRuleCall_1_0_0_or_INTTerminalRuleCall_1_0_1_or_STRINGTerminalRuleCall_1_0_2_or_WhereKeyword_1_0_6__a.equals(syntax))
				emit_Anything___ANY_OTHERTerminalRuleCall_1_0_7_or_FullStopKeyword_1_0_3_or_IDTerminalRuleCall_1_0_0_or_INTTerminalRuleCall_1_0_1_or_STRINGTerminalRuleCall_1_0_2_or_WhereKeyword_1_0_6__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FollowByWhere_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_FollowByWhere_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (
	  *         ID | 
	  *         INT | 
	  *         STRING | 
	  *         '.' | 
	  *         'where' | 
	  *         ANY_OTHER
	  *     )*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ')' (rule start)
	 *     (rule start) '(' (ambiguity) extraParenthesis+=ExtraParenthesisRule
	 *     (rule start) '(' (ambiguity) operator+=Operators
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) extraParenthesis+=ExtraParenthesisRule
	 *     (rule start) (ambiguity) operator+=Operators
	 *     extraParenthesis+=ExtraParenthesisRule (ambiguity) ')' (rule end)
	 *     extraParenthesis+=ExtraParenthesisRule (ambiguity) (rule end)
	 *     extraParenthesis+=ExtraParenthesisRule (ambiguity) extraParenthesis+=ExtraParenthesisRule
	 *     extraParenthesis+=ExtraParenthesisRule (ambiguity) operator+=Operators
	 *     operator+=Operators (ambiguity) ')' (rule end)
	 *     operator+=Operators (ambiguity) (rule end)
	 *     operator+=Operators (ambiguity) extraParenthesis+=ExtraParenthesisRule
	 *     operator+=Operators (ambiguity) operator+=Operators
	 */
	protected void emit_Anything___ANY_OTHERTerminalRuleCall_1_0_7_or_FullStopKeyword_1_0_3_or_IDTerminalRuleCall_1_0_0_or_INTTerminalRuleCall_1_0_1_or_STRINGTerminalRuleCall_1_0_2_or_WhereKeyword_1_0_6__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'where' timer=Timer
	 */
	protected void emit_FollowByWhere_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
