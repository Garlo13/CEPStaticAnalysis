/*
 * generated by Xtext 2.13.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EsperGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Domainmodel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRulesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cRulesRulePartsParserRuleCall_0_0 = (RuleCall)cRulesAssignment_0.eContents().get(0);
		private final Assignment cEventsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_1_0 = (RuleCall)cEventsAssignment_1.eContents().get(0);
		
		//Domainmodel:
		//	(rules+=RuleParts | events+=Event)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(rules+=RuleParts | events+=Event)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//rules+=RuleParts
		public Assignment getRulesAssignment_0() { return cRulesAssignment_0; }
		
		//RuleParts
		public RuleCall getRulesRulePartsParserRuleCall_0_0() { return cRulesRulePartsParserRuleCall_0_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_1() { return cEventsAssignment_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_1_0() { return cEventsEventParserRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSchemaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cEventattributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEventattributesAttributesParserRuleCall_3_0 = (RuleCall)cEventattributesAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////------------------EVENTS-------------------------------------------
		//Event:
		//	'create' 'schema' name=ID eventattributes=Attributes ';';
		@Override public ParserRule getRule() { return rule; }
		
		//'create' 'schema' name=ID eventattributes=Attributes ';'
		public Group getGroup() { return cGroup; }
		
		//'create'
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }
		
		//'schema'
		public Keyword getSchemaKeyword_1() { return cSchemaKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//eventattributes=Attributes
		public Assignment getEventattributesAssignment_3() { return cEventattributesAssignment_3; }
		
		//Attributes
		public RuleCall getEventattributesAttributesParserRuleCall_3_0() { return cEventattributesAttributesParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class AttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Attributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributesDefinitionParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeAttributesDefinitionParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Attributes:
		//	'(' attribute+=AttributesDefinition (',' attribute+=AttributesDefinition)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' attribute+=AttributesDefinition (',' attribute+=AttributesDefinition)* ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//attribute+=AttributesDefinition
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }
		
		//AttributesDefinition
		public RuleCall getAttributeAttributesDefinitionParserRuleCall_1_0() { return cAttributeAttributesDefinitionParserRuleCall_1_0; }
		
		//(',' attribute+=AttributesDefinition)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//attribute+=AttributesDefinition
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }
		
		//AttributesDefinition
		public RuleCall getAttributeAttributesDefinitionParserRuleCall_2_1_0() { return cAttributeAttributesDefinitionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AttributesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.AttributesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//AttributesDefinition:
		//	name+=ID type+=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name+=ID type+=ID
		public Group getGroup() { return cGroup; }
		
		//name+=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type+=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
	}
	public class RulePartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.RuleParts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameRuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameRuleNameParserRuleCall_0_0 = (RuleCall)cNameRuleAssignment_0.eContents().get(0);
		private final Assignment cInsertAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInsertInsertParserRuleCall_1_0 = (RuleCall)cInsertAssignment_1.eContents().get(0);
		private final Assignment cPriorityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityPriorityParserRuleCall_2_0 = (RuleCall)cPriorityAssignment_2.eContents().get(0);
		private final Assignment cSelectRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSelectRuleSelectParserRuleCall_3_0 = (RuleCall)cSelectRuleAssignment_3.eContents().get(0);
		private final Assignment cFromRuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFromRuleFromParserRuleCall_4_0 = (RuleCall)cFromRuleAssignment_4.eContents().get(0);
		private final Assignment cGroupByAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGroupByGroupByParserRuleCall_5_0 = (RuleCall)cGroupByAssignment_5.eContents().get(0);
		private final Assignment cHavingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cHavingHavingParserRuleCall_6_0 = (RuleCall)cHavingAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////--------------------RULES-------------------------------------------
		//RuleParts:
		//	nameRule=Name insert=Insert priority=Priority? selectRule=Select fromRule=From groupBy=GroupBy? having=Having? ';';
		@Override public ParserRule getRule() { return rule; }
		
		//nameRule=Name insert=Insert priority=Priority? selectRule=Select fromRule=From groupBy=GroupBy? having=Having? ';'
		public Group getGroup() { return cGroup; }
		
		//nameRule=Name
		public Assignment getNameRuleAssignment_0() { return cNameRuleAssignment_0; }
		
		//Name
		public RuleCall getNameRuleNameParserRuleCall_0_0() { return cNameRuleNameParserRuleCall_0_0; }
		
		//insert=Insert
		public Assignment getInsertAssignment_1() { return cInsertAssignment_1; }
		
		//Insert
		public RuleCall getInsertInsertParserRuleCall_1_0() { return cInsertInsertParserRuleCall_1_0; }
		
		//priority=Priority?
		public Assignment getPriorityAssignment_2() { return cPriorityAssignment_2; }
		
		//Priority
		public RuleCall getPriorityPriorityParserRuleCall_2_0() { return cPriorityPriorityParserRuleCall_2_0; }
		
		//selectRule=Select
		public Assignment getSelectRuleAssignment_3() { return cSelectRuleAssignment_3; }
		
		//Select
		public RuleCall getSelectRuleSelectParserRuleCall_3_0() { return cSelectRuleSelectParserRuleCall_3_0; }
		
		//fromRule=From
		public Assignment getFromRuleAssignment_4() { return cFromRuleAssignment_4; }
		
		//From
		public RuleCall getFromRuleFromParserRuleCall_4_0() { return cFromRuleFromParserRuleCall_4_0; }
		
		//groupBy=GroupBy?
		public Assignment getGroupByAssignment_5() { return cGroupByAssignment_5; }
		
		//GroupBy
		public RuleCall getGroupByGroupByParserRuleCall_5_0() { return cGroupByGroupByParserRuleCall_5_0; }
		
		//having=Having?
		public Assignment getHavingAssignment_6() { return cHavingAssignment_6; }
		
		//Having
		public RuleCall getHavingHavingParserRuleCall_6_0() { return cHavingHavingParserRuleCall_6_0; }
		
		//';'
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}
	public class InsertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Insert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInsertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIntoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Insert:
		//	'insert' 'into' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'insert' 'into' name=ID
		public Group getGroup() { return cGroup; }
		
		//'insert'
		public Keyword getInsertKeyword_0() { return cInsertKeyword_0; }
		
		//'into'
		public Keyword getIntoKeyword_1() { return cIntoKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Name:
		//	'@Name' '(' name=STRING ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@Name' '(' name=STRING ')'
		public Group getGroup() { return cGroup; }
		
		//'@Name'
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class PriorityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Priority");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPriorityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPriorityIntAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPriorityIntINTTerminalRuleCall_2_0 = (RuleCall)cPriorityIntAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Priority:
		//	'@Priority' '(' priorityInt=INT ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'@Priority' '(' priorityInt=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'@Priority'
		public Keyword getPriorityKeyword_0() { return cPriorityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//priorityInt=INT
		public Assignment getPriorityIntAssignment_2() { return cPriorityIntAssignment_2; }
		
		//INT
		public RuleCall getPriorityIntINTTerminalRuleCall_2_0() { return cPriorityIntINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Select");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSelectKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cSelectAttributesAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cSelectAttributesSelectAttributesDefinitionParserRuleCall_0_1_0_0 = (RuleCall)cSelectAttributesAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cAsKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cAliasAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cAliasValidIDParserRuleCall_0_1_1_1_0 = (RuleCall)cAliasAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cSelectAttributesAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cSelectAttributesSelectAttributesDefinitionParserRuleCall_0_2_1_0 = (RuleCall)cSelectAttributesAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cAsKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cAliasAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cAliasValidIDParserRuleCall_0_2_2_1_0 = (RuleCall)cAliasAssignment_0_2_2_1.eContents().get(0);
		private final Assignment cAsteriskAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_1_0 = (Keyword)cAsteriskAssignment_1.eContents().get(0);
		
		//Select:
		//	'select' (selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)+ (','
		//	selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)*
		//	| asterisk?='*';
		@Override public ParserRule getRule() { return rule; }
		
		//'select' (selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)+ (','
		//selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)* | asterisk?='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'select' (selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)+ (','
		//selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)*
		public Group getGroup_0() { return cGroup_0; }
		
		//'select'
		public Keyword getSelectKeyword_0_0() { return cSelectKeyword_0_0; }
		
		//(selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)+
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//selectAttributes+=SelectAttributesDefinition
		public Assignment getSelectAttributesAssignment_0_1_0() { return cSelectAttributesAssignment_0_1_0; }
		
		//SelectAttributesDefinition
		public RuleCall getSelectAttributesSelectAttributesDefinitionParserRuleCall_0_1_0_0() { return cSelectAttributesSelectAttributesDefinitionParserRuleCall_0_1_0_0; }
		
		//('as' alias+=ValidID)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//'as'
		public Keyword getAsKeyword_0_1_1_0() { return cAsKeyword_0_1_1_0; }
		
		//alias+=ValidID
		public Assignment getAliasAssignment_0_1_1_1() { return cAliasAssignment_0_1_1_1; }
		
		//ValidID
		public RuleCall getAliasValidIDParserRuleCall_0_1_1_1_0() { return cAliasValidIDParserRuleCall_0_1_1_1_0; }
		
		//(',' selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//selectAttributes+=SelectAttributesDefinition
		public Assignment getSelectAttributesAssignment_0_2_1() { return cSelectAttributesAssignment_0_2_1; }
		
		//SelectAttributesDefinition
		public RuleCall getSelectAttributesSelectAttributesDefinitionParserRuleCall_0_2_1_0() { return cSelectAttributesSelectAttributesDefinitionParserRuleCall_0_2_1_0; }
		
		//('as' alias+=ValidID)?
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }
		
		//'as'
		public Keyword getAsKeyword_0_2_2_0() { return cAsKeyword_0_2_2_0; }
		
		//alias+=ValidID
		public Assignment getAliasAssignment_0_2_2_1() { return cAliasAssignment_0_2_2_1; }
		
		//ValidID
		public RuleCall getAliasValidIDParserRuleCall_0_2_2_1_0() { return cAliasValidIDParserRuleCall_0_2_2_1_0; }
		
		//asterisk?='*'
		public Assignment getAsteriskAssignment_1() { return cAsteriskAssignment_1; }
		
		//'*'
		public Keyword getAsteriskAsteriskKeyword_1_0() { return cAsteriskAsteriskKeyword_1_0; }
	}
	public class KindSelectAttributesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.KindSelectAttributesDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSingleSelectDefinitionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSingleSelectDefinitionSingleSelectDefinitionParserRuleCall_0_0 = (RuleCall)cSingleSelectDefinitionAssignment_0.eContents().get(0);
		private final Assignment cDefaultMethodAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cDefaultMethodDefaultMethodsParserRuleCall_1_0 = (RuleCall)cDefaultMethodAssignment_1.eContents().get(0);
		private final Assignment cIntAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cIntINTTerminalRuleCall_2_0 = (RuleCall)cIntAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringSTRINGTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		
		//KindSelectAttributesDefinition:
		//	singleSelectDefinition=SingleSelectDefinition | defaultMethod=DefaultMethods | int=INT | string=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//singleSelectDefinition=SingleSelectDefinition | defaultMethod=DefaultMethods | int=INT | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//singleSelectDefinition=SingleSelectDefinition
		public Assignment getSingleSelectDefinitionAssignment_0() { return cSingleSelectDefinitionAssignment_0; }
		
		//SingleSelectDefinition
		public RuleCall getSingleSelectDefinitionSingleSelectDefinitionParserRuleCall_0_0() { return cSingleSelectDefinitionSingleSelectDefinitionParserRuleCall_0_0; }
		
		//defaultMethod=DefaultMethods
		public Assignment getDefaultMethodAssignment_1() { return cDefaultMethodAssignment_1; }
		
		//DefaultMethods
		public RuleCall getDefaultMethodDefaultMethodsParserRuleCall_1_0() { return cDefaultMethodDefaultMethodsParserRuleCall_1_0; }
		
		//int=INT
		public Assignment getIntAssignment_2() { return cIntAssignment_2; }
		
		//INT
		public RuleCall getIntINTTerminalRuleCall_2_0() { return cIntINTTerminalRuleCall_2_0; }
		
		//string=STRING
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }
		
		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_3_0() { return cStringSTRINGTerminalRuleCall_3_0; }
	}
	public class SelectAttributesDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.SelectAttributesDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRightSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRightSideKindSelectAttributesDefinitionParserRuleCall_0_0 = (RuleCall)cRightSideAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorsEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cLeftSideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftSideKindSelectAttributesDefinitionParserRuleCall_1_1_0 = (RuleCall)cLeftSideAssignment_1_1.eContents().get(0);
		
		//SelectAttributesDefinition:
		//	rightSide+=KindSelectAttributesDefinition (operator+=Operators leftSide+=KindSelectAttributesDefinition)*;
		@Override public ParserRule getRule() { return rule; }
		
		//rightSide+=KindSelectAttributesDefinition (operator+=Operators leftSide+=KindSelectAttributesDefinition)*
		public Group getGroup() { return cGroup; }
		
		//rightSide+=KindSelectAttributesDefinition
		public Assignment getRightSideAssignment_0() { return cRightSideAssignment_0; }
		
		//KindSelectAttributesDefinition
		public RuleCall getRightSideKindSelectAttributesDefinitionParserRuleCall_0_0() { return cRightSideKindSelectAttributesDefinitionParserRuleCall_0_0; }
		
		//(operator+=Operators leftSide+=KindSelectAttributesDefinition)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operator+=Operators
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operators
		public RuleCall getOperatorOperatorsEnumRuleCall_1_0_0() { return cOperatorOperatorsEnumRuleCall_1_0_0; }
		
		//leftSide+=KindSelectAttributesDefinition
		public Assignment getLeftSideAssignment_1_1() { return cLeftSideAssignment_1_1; }
		
		//KindSelectAttributesDefinition
		public RuleCall getLeftSideKindSelectAttributesDefinitionParserRuleCall_1_1_0() { return cLeftSideKindSelectAttributesDefinitionParserRuleCall_1_1_0; }
	}
	public class SingleSelectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.SingleSelectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEventSingleDefinitionCrossReference_0_0 = (CrossReference)cEventAssignment_0.eContents().get(0);
		private final RuleCall cEventSingleDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cEventSingleDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAttributeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAttributeIDTerminalRuleCall_2_0_0 = (RuleCall)cAttributeAssignment_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//SingleSelectDefinition:
		//	event+=[SingleDefinition] '.' (attribute+=ID | '*');
		@Override public ParserRule getRule() { return rule; }
		
		//event+=[SingleDefinition] '.' (attribute+=ID | '*')
		public Group getGroup() { return cGroup; }
		
		//event+=[SingleDefinition]
		public Assignment getEventAssignment_0() { return cEventAssignment_0; }
		
		//[SingleDefinition]
		public CrossReference getEventSingleDefinitionCrossReference_0_0() { return cEventSingleDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getEventSingleDefinitionIDTerminalRuleCall_0_0_1() { return cEventSingleDefinitionIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute+=ID | '*'
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//attribute+=ID
		public Assignment getAttributeAssignment_2_0() { return cAttributeAssignment_2_0; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_0_0() { return cAttributeIDTerminalRuleCall_2_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }
	}
	public class FromElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.From");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cEventAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final CrossReference cEventEventCrossReference_1_0_0_0 = (CrossReference)cEventAssignment_1_0_0.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_1_0_0_0_1 = (RuleCall)cEventEventCrossReference_1_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_0_1_0 = (Group)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1_0_0 = (Keyword)cGroup_1_0_1_0.eContents().get(0);
		private final Assignment cAnythingAssignment_1_0_1_0_1 = (Assignment)cGroup_1_0_1_0.eContents().get(1);
		private final RuleCall cAnythingAnythingParserRuleCall_1_0_1_0_1_0 = (RuleCall)cAnythingAssignment_1_0_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_1_0_2 = (Keyword)cGroup_1_0_1_0.eContents().get(2);
		private final Group cGroup_1_0_1_1 = (Group)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_1_1_0 = (Keyword)cGroup_1_0_1_1.eContents().get(0);
		private final Assignment cAnythingAssignment_1_0_1_1_1 = (Assignment)cGroup_1_0_1_1.eContents().get(1);
		private final RuleCall cAnythingAnythingParserRuleCall_1_0_1_1_1_0 = (RuleCall)cAnythingAssignment_1_0_1_1_1.eContents().get(0);
		private final Assignment cPatternAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cPatternPatternParserRuleCall_1_1_0 = (RuleCall)cPatternAssignment_1_1.eContents().get(0);
		
		//From:
		//	'from' (event=[Event] ('(' anything=Anything ')' | '.' anything=Anything) | pattern=Pattern);
		@Override public ParserRule getRule() { return rule; }
		
		//'from' (event=[Event] ('(' anything=Anything ')' | '.' anything=Anything) | pattern=Pattern)
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//event=[Event] ('(' anything=Anything ')' | '.' anything=Anything) | pattern=Pattern
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//event=[Event] ('(' anything=Anything ')' | '.' anything=Anything)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//event=[Event]
		public Assignment getEventAssignment_1_0_0() { return cEventAssignment_1_0_0; }
		
		//[Event]
		public CrossReference getEventEventCrossReference_1_0_0_0() { return cEventEventCrossReference_1_0_0_0; }
		
		//ID
		public RuleCall getEventEventIDTerminalRuleCall_1_0_0_0_1() { return cEventEventIDTerminalRuleCall_1_0_0_0_1; }
		
		//'(' anything=Anything ')' | '.' anything=Anything
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'(' anything=Anything ')'
		public Group getGroup_1_0_1_0() { return cGroup_1_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1_0_0() { return cLeftParenthesisKeyword_1_0_1_0_0; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_1_0_1_0_1() { return cAnythingAssignment_1_0_1_0_1; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_1_0_1_0_1_0() { return cAnythingAnythingParserRuleCall_1_0_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_1_0_2() { return cRightParenthesisKeyword_1_0_1_0_2; }
		
		//'.' anything=Anything
		public Group getGroup_1_0_1_1() { return cGroup_1_0_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_1_1_0() { return cFullStopKeyword_1_0_1_1_0; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_1_0_1_1_1() { return cAnythingAssignment_1_0_1_1_1; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_1_0_1_1_1_0() { return cAnythingAnythingParserRuleCall_1_0_1_1_1_0; }
		
		//pattern=Pattern
		public Assignment getPatternAssignment_1_1() { return cPatternAssignment_1_1; }
		
		//Pattern
		public RuleCall getPatternPatternParserRuleCall_1_1_0() { return cPatternPatternParserRuleCall_1_1_0; }
	}
	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cJoinFollowByAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJoinFollowByJoinFollowByParserRuleCall_2_0 = (RuleCall)cJoinFollowByAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWinAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWinWinParserRuleCall_4_1_0 = (RuleCall)cWinAssignment_4_1.eContents().get(0);
		
		////------------------Pattern----------------------------
		//Pattern:
		//	'pattern' '[' joinFollowBy=JoinFollowBy ']' ('.' win=Win)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'pattern' '[' joinFollowBy=JoinFollowBy ']' ('.' win=Win)?
		public Group getGroup() { return cGroup; }
		
		//'pattern'
		public Keyword getPatternKeyword_0() { return cPatternKeyword_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//joinFollowBy=JoinFollowBy
		public Assignment getJoinFollowByAssignment_2() { return cJoinFollowByAssignment_2; }
		
		//JoinFollowBy
		public RuleCall getJoinFollowByJoinFollowByParserRuleCall_2_0() { return cJoinFollowByJoinFollowByParserRuleCall_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//('.' win=Win)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//win=Win
		public Assignment getWinAssignment_4_1() { return cWinAssignment_4_1; }
		
		//Win
		public RuleCall getWinWinParserRuleCall_4_1_0() { return cWinWinParserRuleCall_4_1_0; }
	}
	public class JoinFollowByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.JoinFollowBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFollowsByJoinListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFollowsByJoinListAbstractFollowByParserRuleCall_0_0 = (RuleCall)cFollowsByJoinListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperatorsEnumRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cFollowsByJoinListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFollowsByJoinListAbstractFollowByParserRuleCall_1_1_0 = (RuleCall)cFollowsByJoinListAssignment_1_1.eContents().get(0);
		
		////------------------FollowBy----------------------------
		//JoinFollowBy:
		//	followsByJoinList+=AbstractFollowBy (operator+=Operators followsByJoinList+=AbstractFollowBy)*;
		@Override public ParserRule getRule() { return rule; }
		
		//followsByJoinList+=AbstractFollowBy (operator+=Operators followsByJoinList+=AbstractFollowBy)*
		public Group getGroup() { return cGroup; }
		
		//followsByJoinList+=AbstractFollowBy
		public Assignment getFollowsByJoinListAssignment_0() { return cFollowsByJoinListAssignment_0; }
		
		//AbstractFollowBy
		public RuleCall getFollowsByJoinListAbstractFollowByParserRuleCall_0_0() { return cFollowsByJoinListAbstractFollowByParserRuleCall_0_0; }
		
		//(operator+=Operators followsByJoinList+=AbstractFollowBy)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operator+=Operators
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//Operators
		public RuleCall getOperatorOperatorsEnumRuleCall_1_0_0() { return cOperatorOperatorsEnumRuleCall_1_0_0; }
		
		//followsByJoinList+=AbstractFollowBy
		public Assignment getFollowsByJoinListAssignment_1_1() { return cFollowsByJoinListAssignment_1_1; }
		
		//AbstractFollowBy
		public RuleCall getFollowsByJoinListAbstractFollowByParserRuleCall_1_1_0() { return cFollowsByJoinListAbstractFollowByParserRuleCall_1_1_0; }
	}
	public class AbstractFollowByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.AbstractFollowBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cFollowByAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cFollowByFollowByParserRuleCall_0_0_0 = (RuleCall)cFollowByAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFollowByAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFollowByFollowByParserRuleCall_0_1_1_0 = (RuleCall)cFollowByAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cWherePartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWherePartFollowByWhereParserRuleCall_1_0 = (RuleCall)cWherePartAssignment_1.eContents().get(0);
		
		//AbstractFollowBy:
		//	(=> followBy=FollowBy | '(' followBy=FollowBy ')') wherePart=FollowByWhere?;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> followBy=FollowBy | '(' followBy=FollowBy ')') wherePart=FollowByWhere?
		public Group getGroup() { return cGroup; }
		
		//=> followBy=FollowBy | '(' followBy=FollowBy ')'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> followBy=FollowBy
		public Assignment getFollowByAssignment_0_0() { return cFollowByAssignment_0_0; }
		
		//FollowBy
		public RuleCall getFollowByFollowByParserRuleCall_0_0_0() { return cFollowByFollowByParserRuleCall_0_0_0; }
		
		//'(' followBy=FollowBy ')'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_0() { return cLeftParenthesisKeyword_0_1_0; }
		
		//followBy=FollowBy
		public Assignment getFollowByAssignment_0_1_1() { return cFollowByAssignment_0_1_1; }
		
		//FollowBy
		public RuleCall getFollowByFollowByParserRuleCall_0_1_1_0() { return cFollowByFollowByParserRuleCall_0_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//wherePart=FollowByWhere?
		public Assignment getWherePartAssignment_1() { return cWherePartAssignment_1; }
		
		//FollowByWhere
		public RuleCall getWherePartFollowByWhereParserRuleCall_1_0() { return cWherePartFollowByWhereParserRuleCall_1_0; }
	}
	public class FollowByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.FollowBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftSideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftSideTerminalExpressionParserRuleCall_0_0 = (RuleCall)cLeftSideAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightSideAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightSideTerminalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightSideAssignment_1_1.eContents().get(0);
		
		//FollowBy:
		//	leftSide=TerminalExpression (=> '->' rightSide+=TerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//leftSide=TerminalExpression (=> '->' rightSide+=TerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//leftSide=TerminalExpression
		public Assignment getLeftSideAssignment_0() { return cLeftSideAssignment_0; }
		
		//TerminalExpression
		public RuleCall getLeftSideTerminalExpressionParserRuleCall_0_0() { return cLeftSideTerminalExpressionParserRuleCall_0_0; }
		
		//(=> '->' rightSide+=TerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> '->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//rightSide+=TerminalExpression
		public Assignment getRightSideAssignment_1_1() { return cRightSideAssignment_1_1; }
		
		//TerminalExpression
		public RuleCall getRightSideTerminalExpressionParserRuleCall_1_1_0() { return cRightSideTerminalExpressionParserRuleCall_1_1_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cEveryAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cEveryEveryKeyword_0_0_0 = (Keyword)cEveryAssignment_0_0.eContents().get(0);
		private final Assignment cEveryExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEveryExpressionFollowByParserRuleCall_0_1_0 = (RuleCall)cEveryExpressionAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cParenthesisAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cParenthesisLeftParenthesisKeyword_1_0_0 = (Keyword)cParenthesisAssignment_1_0.eContents().get(0);
		private final Assignment cBetweenParenthesisAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBetweenParenthesisFollowByParserRuleCall_1_1_0 = (RuleCall)cBetweenParenthesisAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSingleDefinitionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSingleDefinitionSingleDefinitionParserRuleCall_2_0 = (RuleCall)cSingleDefinitionAssignment_2.eContents().get(0);
		
		//TerminalExpression:
		//	every?='every' everyExpression=FollowBy | parenthesis?='(' betweenParenthesis=FollowBy ')' |
		//	singleDefinition=SingleDefinition;
		@Override public ParserRule getRule() { return rule; }
		
		//every?='every' everyExpression=FollowBy | parenthesis?='(' betweenParenthesis=FollowBy ')' |
		//singleDefinition=SingleDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//every?='every' everyExpression=FollowBy
		public Group getGroup_0() { return cGroup_0; }
		
		//every?='every'
		public Assignment getEveryAssignment_0_0() { return cEveryAssignment_0_0; }
		
		//'every'
		public Keyword getEveryEveryKeyword_0_0_0() { return cEveryEveryKeyword_0_0_0; }
		
		//everyExpression=FollowBy
		public Assignment getEveryExpressionAssignment_0_1() { return cEveryExpressionAssignment_0_1; }
		
		//FollowBy
		public RuleCall getEveryExpressionFollowByParserRuleCall_0_1_0() { return cEveryExpressionFollowByParserRuleCall_0_1_0; }
		
		//parenthesis?='(' betweenParenthesis=FollowBy ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//parenthesis?='('
		public Assignment getParenthesisAssignment_1_0() { return cParenthesisAssignment_1_0; }
		
		//'('
		public Keyword getParenthesisLeftParenthesisKeyword_1_0_0() { return cParenthesisLeftParenthesisKeyword_1_0_0; }
		
		//betweenParenthesis=FollowBy
		public Assignment getBetweenParenthesisAssignment_1_1() { return cBetweenParenthesisAssignment_1_1; }
		
		//FollowBy
		public RuleCall getBetweenParenthesisFollowByParserRuleCall_1_1_0() { return cBetweenParenthesisFollowByParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//singleDefinition=SingleDefinition
		public Assignment getSingleDefinitionAssignment_2() { return cSingleDefinitionAssignment_2; }
		
		//SingleDefinition
		public RuleCall getSingleDefinitionSingleDefinitionParserRuleCall_2_0() { return cSingleDefinitionSingleDefinitionParserRuleCall_2_0; }
	}
	public class KindOfEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.KindOfEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInsertParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//KindOfEvent:
		//	Event | Insert;
		@Override public ParserRule getRule() { return rule; }
		
		//Event | Insert
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }
		
		//Insert
		public RuleCall getInsertParserRuleCall_1() { return cInsertParserRuleCall_1; }
	}
	public class SingleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.SingleDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSimpleEventsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSimpleEventsKindOfEventCrossReference_1_0 = (CrossReference)cSimpleEventsAssignment_1.eContents().get(0);
		private final RuleCall cSimpleEventsKindOfEventIDTerminalRuleCall_1_0_1 = (RuleCall)cSimpleEventsKindOfEventCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAnythingAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAnythingAnythingParserRuleCall_2_1_0 = (RuleCall)cAnythingAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//SingleDefinition:
		//	(=> name=ID '=')? simpleEvents=[KindOfEvent] (=> '(' anything=Anything ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> name=ID '=')? simpleEvents=[KindOfEvent] (=> '(' anything=Anything ')')?
		public Group getGroup() { return cGroup; }
		
		//(=> name=ID '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//=> name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//simpleEvents=[KindOfEvent]
		public Assignment getSimpleEventsAssignment_1() { return cSimpleEventsAssignment_1; }
		
		//[KindOfEvent]
		public CrossReference getSimpleEventsKindOfEventCrossReference_1_0() { return cSimpleEventsKindOfEventCrossReference_1_0; }
		
		//ID
		public RuleCall getSimpleEventsKindOfEventIDTerminalRuleCall_1_0_1() { return cSimpleEventsKindOfEventIDTerminalRuleCall_1_0_1; }
		
		//(=> '(' anything=Anything ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//=> '('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_2_1() { return cAnythingAssignment_2_1; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_2_1_0() { return cAnythingAnythingParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class WinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Win");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWinKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultMethodDefaultMethodsParserRuleCall_2_0 = (RuleCall)cDefaultMethodAssignment_2.eContents().get(0);
		
		////--------------------------Win-----------------------------------
		//Win:
		//	'win' ':' defaultMethod=DefaultMethods;
		@Override public ParserRule getRule() { return rule; }
		
		//'win' ':' defaultMethod=DefaultMethods
		public Group getGroup() { return cGroup; }
		
		//'win'
		public Keyword getWinKeyword_0() { return cWinKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//defaultMethod=DefaultMethods
		public Assignment getDefaultMethodAssignment_2() { return cDefaultMethodAssignment_2; }
		
		//DefaultMethods
		public RuleCall getDefaultMethodDefaultMethodsParserRuleCall_2_0() { return cDefaultMethodDefaultMethodsParserRuleCall_2_0; }
	}
	public class FollowByWhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.FollowByWhere");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cFollowByWhereParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWhereKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTimerAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTimerTimerParserRuleCall_1_1_0 = (RuleCall)cTimerAssignment_1_1.eContents().get(0);
		
		////----------------------Where-------------------------
		//FollowByWhere:
		//	'(' FollowByWhere ')' |
		//	'where' timer=Timer;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' FollowByWhere ')' | 'where' timer=Timer
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' FollowByWhere ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//FollowByWhere
		public RuleCall getFollowByWhereParserRuleCall_0_1() { return cFollowByWhereParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//'where' timer=Timer
		public Group getGroup_1() { return cGroup_1; }
		
		//'where'
		public Keyword getWhereKeyword_1_0() { return cWhereKeyword_1_0; }
		
		//timer=Timer
		public Assignment getTimerAssignment_1_1() { return cTimerAssignment_1_1; }
		
		//Timer
		public RuleCall getTimerTimerParserRuleCall_1_1_0() { return cTimerTimerParserRuleCall_1_1_0; }
	}
	public class TimerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Timer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefaultMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultMethodDefaultMethodsParserRuleCall_2_0 = (RuleCall)cDefaultMethodAssignment_2.eContents().get(0);
		
		//Timer:
		//	'timer' ':' defaultMethod=DefaultMethods;
		@Override public ParserRule getRule() { return rule; }
		
		//'timer' ':' defaultMethod=DefaultMethods
		public Group getGroup() { return cGroup; }
		
		//'timer'
		public Keyword getTimerKeyword_0() { return cTimerKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//defaultMethod=DefaultMethods
		public Assignment getDefaultMethodAssignment_2() { return cDefaultMethodAssignment_2; }
		
		//DefaultMethods
		public RuleCall getDefaultMethodDefaultMethodsParserRuleCall_2_0() { return cDefaultMethodDefaultMethodsParserRuleCall_2_0; }
	}
	public class GroupByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.GroupBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnythingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnythingAnythingParserRuleCall_2_0 = (RuleCall)cAnythingAssignment_2.eContents().get(0);
		
		////-------------------GroupBy------------------------------------
		//GroupBy:
		//	'group' 'by' anything=Anything;
		@Override public ParserRule getRule() { return rule; }
		
		//'group' 'by' anything=Anything
		public Group getGroup() { return cGroup; }
		
		//'group'
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }
		
		//'by'
		public Keyword getByKeyword_1() { return cByKeyword_1; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_2() { return cAnythingAssignment_2; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_2_0() { return cAnythingAnythingParserRuleCall_2_0; }
	}
	public class HavingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Having");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHavingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefaultMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefaultMethodDefaultMethodsParserRuleCall_1_0 = (RuleCall)cDefaultMethodAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorOperatorsEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cAnythingAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnythingAnythingParserRuleCall_3_0 = (RuleCall)cAnythingAssignment_3.eContents().get(0);
		
		////-------------------Having------------------------------------
		//Having:
		//	'having' defaultMethod=DefaultMethods operator=Operators anything=Anything;
		@Override public ParserRule getRule() { return rule; }
		
		//'having' defaultMethod=DefaultMethods operator=Operators anything=Anything
		public Group getGroup() { return cGroup; }
		
		//'having'
		public Keyword getHavingKeyword_0() { return cHavingKeyword_0; }
		
		//defaultMethod=DefaultMethods
		public Assignment getDefaultMethodAssignment_1() { return cDefaultMethodAssignment_1; }
		
		//DefaultMethods
		public RuleCall getDefaultMethodDefaultMethodsParserRuleCall_1_0() { return cDefaultMethodDefaultMethodsParserRuleCall_1_0; }
		
		//operator=Operators
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//Operators
		public RuleCall getOperatorOperatorsEnumRuleCall_2_0() { return cOperatorOperatorsEnumRuleCall_2_0; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_3() { return cAnythingAssignment_3; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_3_0() { return cAnythingAnythingParserRuleCall_3_0; }
	}
	public class DefaultMethodsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.DefaultMethods");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameMethodParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnythingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnythingAnythingParserRuleCall_2_0 = (RuleCall)cAnythingAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////-----------------------------------------------------------
		//DefaultMethods:
		//	name=NameMethod '(' anything=Anything ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=NameMethod '(' anything=Anything ')'
		public Group getGroup() { return cGroup; }
		
		//name=NameMethod
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//NameMethod
		public RuleCall getNameNameMethodParserRuleCall_0_0() { return cNameNameMethodParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//anything=Anything
		public Assignment getAnythingAssignment_2() { return cAnythingAssignment_2; }
		
		//Anything
		public RuleCall getAnythingAnythingParserRuleCall_2_0() { return cAnythingAnythingParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValidID:
		//	ID | NameMethod;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | NameMethod
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//NameMethod
		public RuleCall getNameMethodParserRuleCall_1() { return cNameMethodParserRuleCall_1; }
	}
	public class NameMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.NameMethod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAvgKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCurrent_timestampKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCountKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMaxKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cWithinKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cTime_batchKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cTimeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//NameMethod:
		//	'avg'
		//	| 'current_timestamp'
		//	| 'count'
		//	| 'max'
		//	| 'within'
		//	| 'time_batch'
		//	| 'time';
		@Override public ParserRule getRule() { return rule; }
		
		//'avg' | 'current_timestamp' | 'count' | 'max' | 'within' | 'time_batch' | 'time'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'avg'
		public Keyword getAvgKeyword_0() { return cAvgKeyword_0; }
		
		//'current_timestamp'
		public Keyword getCurrent_timestampKeyword_1() { return cCurrent_timestampKeyword_1; }
		
		//'count'
		public Keyword getCountKeyword_2() { return cCountKeyword_2; }
		
		//'max'
		public Keyword getMaxKeyword_3() { return cMaxKeyword_3; }
		
		//'within'
		public Keyword getWithinKeyword_4() { return cWithinKeyword_4; }
		
		//'time_batch'
		public Keyword getTime_batchKeyword_5() { return cTime_batchKeyword_5; }
		
		//'time'
		public Keyword getTimeKeyword_6() { return cTimeKeyword_6; }
	}
	public class AnythingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Anything");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnythingAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Keyword cFullStopKeyword_1_0_3 = (Keyword)cAlternatives_1_0.eContents().get(3);
		private final Assignment cOperatorAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cOperatorOperatorsEnumRuleCall_1_0_4_0 = (RuleCall)cOperatorAssignment_1_0_4.eContents().get(0);
		private final Assignment cExtraParenthesisAssignment_1_0_5 = (Assignment)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cExtraParenthesisExtraParenthesisRuleParserRuleCall_1_0_5_0 = (RuleCall)cExtraParenthesisAssignment_1_0_5.eContents().get(0);
		private final Keyword cWhereKeyword_1_0_6 = (Keyword)cAlternatives_1_0.eContents().get(6);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_0_7 = (RuleCall)cAlternatives_1_0.eContents().get(7);
		
		////--------------------------------------------------------
		//Anything:
		//	{Anything} => (ID | INT | STRING | '.' | operator+=Operators | extraParenthesis+=ExtraParenthesisRule | 'where' |
		//	ANY_OTHER)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Anything} => (ID | INT | STRING | '.' | operator+=Operators | extraParenthesis+=ExtraParenthesisRule | 'where' |
		//ANY_OTHER)*
		public Group getGroup() { return cGroup; }
		
		//{Anything}
		public Action getAnythingAction_0() { return cAnythingAction_0; }
		
		//=> (ID | INT | STRING | '.' | operator+=Operators | extraParenthesis+=ExtraParenthesisRule | 'where' | ANY_OTHER)*
		public Group getGroup_1() { return cGroup_1; }
		
		//ID | INT | STRING | '.' | operator+=Operators | extraParenthesis+=ExtraParenthesisRule | 'where' | ANY_OTHER
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_0() { return cIDTerminalRuleCall_1_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_1() { return cINTTerminalRuleCall_1_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_0_2() { return cSTRINGTerminalRuleCall_1_0_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_3() { return cFullStopKeyword_1_0_3; }
		
		//operator+=Operators
		public Assignment getOperatorAssignment_1_0_4() { return cOperatorAssignment_1_0_4; }
		
		//Operators
		public RuleCall getOperatorOperatorsEnumRuleCall_1_0_4_0() { return cOperatorOperatorsEnumRuleCall_1_0_4_0; }
		
		//extraParenthesis+=ExtraParenthesisRule
		public Assignment getExtraParenthesisAssignment_1_0_5() { return cExtraParenthesisAssignment_1_0_5; }
		
		//ExtraParenthesisRule
		public RuleCall getExtraParenthesisExtraParenthesisRuleParserRuleCall_1_0_5_0() { return cExtraParenthesisExtraParenthesisRuleParserRuleCall_1_0_5_0; }
		
		//'where'
		public Keyword getWhereKeyword_1_0_6() { return cWhereKeyword_1_0_6; }
		
		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_0_7() { return cANY_OTHERTerminalRuleCall_1_0_7; }
	}
	public class ExtraParenthesisRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.ExtraParenthesisRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAnythingParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ExtraParenthesisRule:
		//	'(' Anything ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Anything ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Anything
		public RuleCall getAnythingParserRuleCall_1() { return cAnythingParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	public class OperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.Esper.Operators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanLessThanSignKeyword_1_0 = (Keyword)cLessThanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMoreThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMoreThanGreaterThanSignKeyword_2_0 = (Keyword)cMoreThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessEqualThanLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessEqualThanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMoreEqualThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMoreEqualThanGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cMoreEqualThanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cAndAndKeyword_5_0 = (Keyword)cAndEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOrOrKeyword_6_0 = (Keyword)cOrEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBetweenEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBetweenBetweenKeyword_7_0 = (Keyword)cBetweenEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cInInKeyword_8_0 = (Keyword)cInEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNotNotKeyword_9_0 = (Keyword)cNotEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNotInEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNotInNotInKeyword_10_0 = (Keyword)cNotInEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPlusPlusSignKeyword_11_0 = (Keyword)cPlusEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cMinusHyphenMinusKeyword_12_0 = (Keyword)cMinusEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cMultiplicationAsteriskKeyword_13_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cIsnotEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cIsnotIsNotKeyword_14_0 = (Keyword)cIsnotEnumLiteralDeclaration_14.eContents().get(0);
		
		//enum Operators:
		//	equal='=' | lessThan='<' | moreThan='>' | lessEqualThan='<=' | moreEqualThan='>=' | and |
		//	or | between | in | not | notIn='not in' | plus='+' | minus='-' |
		//	multiplication='*' | isnot='is not';
		public EnumRule getRule() { return rule; }
		
		//equal='=' | lessThan='<' | moreThan='>' | lessEqualThan='<=' | moreEqualThan='>=' | and | or | between | in | not |
		//notIn='not in' | plus='+' | minus='-' | multiplication='*' | isnot='is not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//equal='='
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }
		
		//lessThan='<'
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_1() { return cLessThanEnumLiteralDeclaration_1; }
		
		//'<'
		public Keyword getLessThanLessThanSignKeyword_1_0() { return cLessThanLessThanSignKeyword_1_0; }
		
		//moreThan='>'
		public EnumLiteralDeclaration getMoreThanEnumLiteralDeclaration_2() { return cMoreThanEnumLiteralDeclaration_2; }
		
		//'>'
		public Keyword getMoreThanGreaterThanSignKeyword_2_0() { return cMoreThanGreaterThanSignKeyword_2_0; }
		
		//lessEqualThan='<='
		public EnumLiteralDeclaration getLessEqualThanEnumLiteralDeclaration_3() { return cLessEqualThanEnumLiteralDeclaration_3; }
		
		//'<='
		public Keyword getLessEqualThanLessThanSignEqualsSignKeyword_3_0() { return cLessEqualThanLessThanSignEqualsSignKeyword_3_0; }
		
		//moreEqualThan='>='
		public EnumLiteralDeclaration getMoreEqualThanEnumLiteralDeclaration_4() { return cMoreEqualThanEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getMoreEqualThanGreaterThanSignEqualsSignKeyword_4_0() { return cMoreEqualThanGreaterThanSignEqualsSignKeyword_4_0; }
		
		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_5() { return cAndEnumLiteralDeclaration_5; }
		
		//'and'
		public Keyword getAndAndKeyword_5_0() { return cAndAndKeyword_5_0; }
		
		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_6() { return cOrEnumLiteralDeclaration_6; }
		
		//'or'
		public Keyword getOrOrKeyword_6_0() { return cOrOrKeyword_6_0; }
		
		//between
		public EnumLiteralDeclaration getBetweenEnumLiteralDeclaration_7() { return cBetweenEnumLiteralDeclaration_7; }
		
		//'between'
		public Keyword getBetweenBetweenKeyword_7_0() { return cBetweenBetweenKeyword_7_0; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_8() { return cInEnumLiteralDeclaration_8; }
		
		//'in'
		public Keyword getInInKeyword_8_0() { return cInInKeyword_8_0; }
		
		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration_9() { return cNotEnumLiteralDeclaration_9; }
		
		//'not'
		public Keyword getNotNotKeyword_9_0() { return cNotNotKeyword_9_0; }
		
		//notIn='not in'
		public EnumLiteralDeclaration getNotInEnumLiteralDeclaration_10() { return cNotInEnumLiteralDeclaration_10; }
		
		//'not in'
		public Keyword getNotInNotInKeyword_10_0() { return cNotInNotInKeyword_10_0; }
		
		//plus='+'
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_11() { return cPlusEnumLiteralDeclaration_11; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_11_0() { return cPlusPlusSignKeyword_11_0; }
		
		//minus='-'
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_12() { return cMinusEnumLiteralDeclaration_12; }
		
		//'-'
		public Keyword getMinusHyphenMinusKeyword_12_0() { return cMinusHyphenMinusKeyword_12_0; }
		
		//multiplication='*'
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_13() { return cMultiplicationEnumLiteralDeclaration_13; }
		
		//'*'
		public Keyword getMultiplicationAsteriskKeyword_13_0() { return cMultiplicationAsteriskKeyword_13_0; }
		
		//isnot='is not'
		public EnumLiteralDeclaration getIsnotEnumLiteralDeclaration_14() { return cIsnotEnumLiteralDeclaration_14; }
		
		//'is not'
		public Keyword getIsnotIsNotKeyword_14_0() { return cIsnotIsNotKeyword_14_0; }
	}
	
	private final DomainmodelElements pDomainmodel;
	private final EventElements pEvent;
	private final AttributesElements pAttributes;
	private final AttributesDefinitionElements pAttributesDefinition;
	private final RulePartsElements pRuleParts;
	private final InsertElements pInsert;
	private final NameElements pName;
	private final PriorityElements pPriority;
	private final SelectElements pSelect;
	private final KindSelectAttributesDefinitionElements pKindSelectAttributesDefinition;
	private final SelectAttributesDefinitionElements pSelectAttributesDefinition;
	private final SingleSelectDefinitionElements pSingleSelectDefinition;
	private final FromElements pFrom;
	private final PatternElements pPattern;
	private final JoinFollowByElements pJoinFollowBy;
	private final AbstractFollowByElements pAbstractFollowBy;
	private final FollowByElements pFollowBy;
	private final TerminalExpressionElements pTerminalExpression;
	private final KindOfEventElements pKindOfEvent;
	private final SingleDefinitionElements pSingleDefinition;
	private final WinElements pWin;
	private final FollowByWhereElements pFollowByWhere;
	private final TimerElements pTimer;
	private final GroupByElements pGroupBy;
	private final HavingElements pHaving;
	private final DefaultMethodsElements pDefaultMethods;
	private final ValidIDElements pValidID;
	private final NameMethodElements pNameMethod;
	private final AnythingElements pAnything;
	private final ExtraParenthesisRuleElements pExtraParenthesisRule;
	private final OperatorsElements eOperators;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EsperGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pEvent = new EventElements();
		this.pAttributes = new AttributesElements();
		this.pAttributesDefinition = new AttributesDefinitionElements();
		this.pRuleParts = new RulePartsElements();
		this.pInsert = new InsertElements();
		this.pName = new NameElements();
		this.pPriority = new PriorityElements();
		this.pSelect = new SelectElements();
		this.pKindSelectAttributesDefinition = new KindSelectAttributesDefinitionElements();
		this.pSelectAttributesDefinition = new SelectAttributesDefinitionElements();
		this.pSingleSelectDefinition = new SingleSelectDefinitionElements();
		this.pFrom = new FromElements();
		this.pPattern = new PatternElements();
		this.pJoinFollowBy = new JoinFollowByElements();
		this.pAbstractFollowBy = new AbstractFollowByElements();
		this.pFollowBy = new FollowByElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pKindOfEvent = new KindOfEventElements();
		this.pSingleDefinition = new SingleDefinitionElements();
		this.pWin = new WinElements();
		this.pFollowByWhere = new FollowByWhereElements();
		this.pTimer = new TimerElements();
		this.pGroupBy = new GroupByElements();
		this.pHaving = new HavingElements();
		this.pDefaultMethods = new DefaultMethodsElements();
		this.pValidID = new ValidIDElements();
		this.pNameMethod = new NameMethodElements();
		this.pAnything = new AnythingElements();
		this.pExtraParenthesisRule = new ExtraParenthesisRuleElements();
		this.eOperators = new OperatorsElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.Esper".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	(rules+=RuleParts | events+=Event)*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	////------------------EVENTS-------------------------------------------
	//Event:
	//	'create' 'schema' name=ID eventattributes=Attributes ';';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Attributes:
	//	'(' attribute+=AttributesDefinition (',' attribute+=AttributesDefinition)* ')';
	public AttributesElements getAttributesAccess() {
		return pAttributes;
	}
	
	public ParserRule getAttributesRule() {
		return getAttributesAccess().getRule();
	}
	
	//AttributesDefinition:
	//	name+=ID type+=ID;
	public AttributesDefinitionElements getAttributesDefinitionAccess() {
		return pAttributesDefinition;
	}
	
	public ParserRule getAttributesDefinitionRule() {
		return getAttributesDefinitionAccess().getRule();
	}
	
	////--------------------RULES-------------------------------------------
	//RuleParts:
	//	nameRule=Name insert=Insert priority=Priority? selectRule=Select fromRule=From groupBy=GroupBy? having=Having? ';';
	public RulePartsElements getRulePartsAccess() {
		return pRuleParts;
	}
	
	public ParserRule getRulePartsRule() {
		return getRulePartsAccess().getRule();
	}
	
	//Insert:
	//	'insert' 'into' name=ID;
	public InsertElements getInsertAccess() {
		return pInsert;
	}
	
	public ParserRule getInsertRule() {
		return getInsertAccess().getRule();
	}
	
	//Name:
	//	'@Name' '(' name=STRING ')';
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Priority:
	//	'@Priority' '(' priorityInt=INT ')';
	public PriorityElements getPriorityAccess() {
		return pPriority;
	}
	
	public ParserRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}
	
	//Select:
	//	'select' (selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)+ (','
	//	selectAttributes+=SelectAttributesDefinition ('as' alias+=ValidID)?)*
	//	| asterisk?='*';
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//KindSelectAttributesDefinition:
	//	singleSelectDefinition=SingleSelectDefinition | defaultMethod=DefaultMethods | int=INT | string=STRING;
	public KindSelectAttributesDefinitionElements getKindSelectAttributesDefinitionAccess() {
		return pKindSelectAttributesDefinition;
	}
	
	public ParserRule getKindSelectAttributesDefinitionRule() {
		return getKindSelectAttributesDefinitionAccess().getRule();
	}
	
	//SelectAttributesDefinition:
	//	rightSide+=KindSelectAttributesDefinition (operator+=Operators leftSide+=KindSelectAttributesDefinition)*;
	public SelectAttributesDefinitionElements getSelectAttributesDefinitionAccess() {
		return pSelectAttributesDefinition;
	}
	
	public ParserRule getSelectAttributesDefinitionRule() {
		return getSelectAttributesDefinitionAccess().getRule();
	}
	
	//SingleSelectDefinition:
	//	event+=[SingleDefinition] '.' (attribute+=ID | '*');
	public SingleSelectDefinitionElements getSingleSelectDefinitionAccess() {
		return pSingleSelectDefinition;
	}
	
	public ParserRule getSingleSelectDefinitionRule() {
		return getSingleSelectDefinitionAccess().getRule();
	}
	
	//From:
	//	'from' (event=[Event] ('(' anything=Anything ')' | '.' anything=Anything) | pattern=Pattern);
	public FromElements getFromAccess() {
		return pFrom;
	}
	
	public ParserRule getFromRule() {
		return getFromAccess().getRule();
	}
	
	////------------------Pattern----------------------------
	//Pattern:
	//	'pattern' '[' joinFollowBy=JoinFollowBy ']' ('.' win=Win)?;
	public PatternElements getPatternAccess() {
		return pPattern;
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}
	
	////------------------FollowBy----------------------------
	//JoinFollowBy:
	//	followsByJoinList+=AbstractFollowBy (operator+=Operators followsByJoinList+=AbstractFollowBy)*;
	public JoinFollowByElements getJoinFollowByAccess() {
		return pJoinFollowBy;
	}
	
	public ParserRule getJoinFollowByRule() {
		return getJoinFollowByAccess().getRule();
	}
	
	//AbstractFollowBy:
	//	(=> followBy=FollowBy | '(' followBy=FollowBy ')') wherePart=FollowByWhere?;
	public AbstractFollowByElements getAbstractFollowByAccess() {
		return pAbstractFollowBy;
	}
	
	public ParserRule getAbstractFollowByRule() {
		return getAbstractFollowByAccess().getRule();
	}
	
	//FollowBy:
	//	leftSide=TerminalExpression (=> '->' rightSide+=TerminalExpression)*;
	public FollowByElements getFollowByAccess() {
		return pFollowBy;
	}
	
	public ParserRule getFollowByRule() {
		return getFollowByAccess().getRule();
	}
	
	//TerminalExpression:
	//	every?='every' everyExpression=FollowBy | parenthesis?='(' betweenParenthesis=FollowBy ')' |
	//	singleDefinition=SingleDefinition;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//KindOfEvent:
	//	Event | Insert;
	public KindOfEventElements getKindOfEventAccess() {
		return pKindOfEvent;
	}
	
	public ParserRule getKindOfEventRule() {
		return getKindOfEventAccess().getRule();
	}
	
	//SingleDefinition:
	//	(=> name=ID '=')? simpleEvents=[KindOfEvent] (=> '(' anything=Anything ')')?;
	public SingleDefinitionElements getSingleDefinitionAccess() {
		return pSingleDefinition;
	}
	
	public ParserRule getSingleDefinitionRule() {
		return getSingleDefinitionAccess().getRule();
	}
	
	////--------------------------Win-----------------------------------
	//Win:
	//	'win' ':' defaultMethod=DefaultMethods;
	public WinElements getWinAccess() {
		return pWin;
	}
	
	public ParserRule getWinRule() {
		return getWinAccess().getRule();
	}
	
	////----------------------Where-------------------------
	//FollowByWhere:
	//	'(' FollowByWhere ')' |
	//	'where' timer=Timer;
	public FollowByWhereElements getFollowByWhereAccess() {
		return pFollowByWhere;
	}
	
	public ParserRule getFollowByWhereRule() {
		return getFollowByWhereAccess().getRule();
	}
	
	//Timer:
	//	'timer' ':' defaultMethod=DefaultMethods;
	public TimerElements getTimerAccess() {
		return pTimer;
	}
	
	public ParserRule getTimerRule() {
		return getTimerAccess().getRule();
	}
	
	////-------------------GroupBy------------------------------------
	//GroupBy:
	//	'group' 'by' anything=Anything;
	public GroupByElements getGroupByAccess() {
		return pGroupBy;
	}
	
	public ParserRule getGroupByRule() {
		return getGroupByAccess().getRule();
	}
	
	////-------------------Having------------------------------------
	//Having:
	//	'having' defaultMethod=DefaultMethods operator=Operators anything=Anything;
	public HavingElements getHavingAccess() {
		return pHaving;
	}
	
	public ParserRule getHavingRule() {
		return getHavingAccess().getRule();
	}
	
	////-----------------------------------------------------------
	//DefaultMethods:
	//	name=NameMethod '(' anything=Anything ')';
	public DefaultMethodsElements getDefaultMethodsAccess() {
		return pDefaultMethods;
	}
	
	public ParserRule getDefaultMethodsRule() {
		return getDefaultMethodsAccess().getRule();
	}
	
	//ValidID:
	//	ID | NameMethod;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//NameMethod:
	//	'avg'
	//	| 'current_timestamp'
	//	| 'count'
	//	| 'max'
	//	| 'within'
	//	| 'time_batch'
	//	| 'time';
	public NameMethodElements getNameMethodAccess() {
		return pNameMethod;
	}
	
	public ParserRule getNameMethodRule() {
		return getNameMethodAccess().getRule();
	}
	
	////--------------------------------------------------------
	//Anything:
	//	{Anything} => (ID | INT | STRING | '.' | operator+=Operators | extraParenthesis+=ExtraParenthesisRule | 'where' |
	//	ANY_OTHER)*;
	public AnythingElements getAnythingAccess() {
		return pAnything;
	}
	
	public ParserRule getAnythingRule() {
		return getAnythingAccess().getRule();
	}
	
	//ExtraParenthesisRule:
	//	'(' Anything ')';
	public ExtraParenthesisRuleElements getExtraParenthesisRuleAccess() {
		return pExtraParenthesisRule;
	}
	
	public ParserRule getExtraParenthesisRuleRule() {
		return getExtraParenthesisRuleAccess().getRule();
	}
	
	//enum Operators:
	//	equal='=' | lessThan='<' | moreThan='>' | lessEqualThan='<=' | moreEqualThan='>=' | and |
	//	or | between | in | not | notIn='not in' | plus='+' | minus='-' |
	//	multiplication='*' | isnot='is not';
	public OperatorsElements getOperatorsAccess() {
		return eOperators;
	}
	
	public EnumRule getOperatorsRule() {
		return getOperatorsAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
