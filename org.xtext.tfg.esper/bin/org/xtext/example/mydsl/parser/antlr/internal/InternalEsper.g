/*
 * generated by Xtext 2.13.0
 */
grammar InternalEsper;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.EsperGrammarAccess;

}

@parser::members {

 	private EsperGrammarAccess grammarAccess;

    public InternalEsperParser(TokenStream input, EsperGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected EsperGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getRulesRulePartsParserRuleCall_0_0());
				}
				lv_rules_0_0=ruleRuleParts
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"rules",
						lv_rules_0_0,
						"org.xtext.example.mydsl.Esper.RuleParts");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getEventsEventParserRuleCall_1_0());
				}
				lv_events_1_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"events",
						lv_events_1_0,
						"org.xtext.example.mydsl.Esper.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='create'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventAccess().getCreateKeyword_0());
		}
		otherlv_1='schema'
		{
			newLeafNode(otherlv_1, grammarAccess.getEventAccess().getSchemaKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getEventattributesAttributesParserRuleCall_3_0());
				}
				lv_eventattributes_3_0=ruleAttributes
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"eventattributes",
						lv_eventattributes_3_0,
						"org.xtext.example.mydsl.Esper.Attributes");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getEventAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleAttributes
entryRuleAttributes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesRule()); }
	iv_ruleAttributes=ruleAttributes
	{ $current=$iv_ruleAttributes.current; }
	EOF;

// Rule Attributes
ruleAttributes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getAttributesAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributesAccess().getAttributeAttributesDefinitionParserRuleCall_1_0());
				}
				lv_attribute_1_0=ruleAttributesDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributesRule());
					}
					add(
						$current,
						"attribute",
						lv_attribute_1_0,
						"org.xtext.example.mydsl.Esper.AttributesDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributesAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributesAccess().getAttributeAttributesDefinitionParserRuleCall_2_1_0());
					}
					lv_attribute_3_0=ruleAttributesDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributesRule());
						}
						add(
							$current,
							"attribute",
							lv_attribute_3_0,
							"org.xtext.example.mydsl.Esper.AttributesDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getAttributesAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleAttributesDefinition
entryRuleAttributesDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributesDefinitionRule()); }
	iv_ruleAttributesDefinition=ruleAttributesDefinition
	{ $current=$iv_ruleAttributesDefinition.current; }
	EOF;

// Rule AttributesDefinition
ruleAttributesDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributesDefinitionAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributesDefinitionRule());
					}
					addWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getAttributesDefinitionAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributesDefinitionRule());
					}
					addWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRuleParts
entryRuleRuleParts returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRulePartsRule()); }
	iv_ruleRuleParts=ruleRuleParts
	{ $current=$iv_ruleRuleParts.current; }
	EOF;

// Rule RuleParts
ruleRuleParts returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getNameRuleNameParserRuleCall_0_0());
				}
				lv_nameRule_0_0=ruleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"nameRule",
						lv_nameRule_0_0,
						"org.xtext.example.mydsl.Esper.Name");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getInsertInsertParserRuleCall_1_0());
				}
				lv_insert_1_0=ruleInsert
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"insert",
						lv_insert_1_0,
						"org.xtext.example.mydsl.Esper.Insert");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getPriorityPriorityParserRuleCall_2_0());
				}
				lv_priority_2_0=rulePriority
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"priority",
						lv_priority_2_0,
						"org.xtext.example.mydsl.Esper.Priority");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getSelectRuleSelectParserRuleCall_3_0());
				}
				lv_selectRule_3_0=ruleSelect
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"selectRule",
						lv_selectRule_3_0,
						"org.xtext.example.mydsl.Esper.Select");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getFromRuleFromParserRuleCall_4_0());
				}
				lv_fromRule_4_0=ruleFrom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"fromRule",
						lv_fromRule_4_0,
						"org.xtext.example.mydsl.Esper.From");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getGroupByGroupByParserRuleCall_5_0());
				}
				lv_groupBy_5_0=ruleGroupBy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"groupBy",
						lv_groupBy_5_0,
						"org.xtext.example.mydsl.Esper.GroupBy");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getRulePartsAccess().getHavingHavingParserRuleCall_6_0());
				}
				lv_having_6_0=ruleHaving
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulePartsRule());
					}
					set(
						$current,
						"having",
						lv_having_6_0,
						"org.xtext.example.mydsl.Esper.Having");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7=';'
		{
			newLeafNode(otherlv_7, grammarAccess.getRulePartsAccess().getSemicolonKeyword_7());
		}
	)
;

// Entry rule entryRuleInsert
entryRuleInsert returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInsertRule()); }
	iv_ruleInsert=ruleInsert
	{ $current=$iv_ruleInsert.current; }
	EOF;

// Rule Insert
ruleInsert returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='insert'
		{
			newLeafNode(otherlv_0, grammarAccess.getInsertAccess().getInsertKeyword_0());
		}
		otherlv_1='into'
		{
			newLeafNode(otherlv_1, grammarAccess.getInsertAccess().getIntoKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getInsertAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInsertRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleName
entryRuleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	iv_ruleName=ruleName
	{ $current=$iv_ruleName.current; }
	EOF;

// Rule Name
ruleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@Name'
		{
			newLeafNode(otherlv_0, grammarAccess.getNameAccess().getNameKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getNameAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getNameAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNameRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getNameAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRulePriority
entryRulePriority returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPriorityRule()); }
	iv_rulePriority=rulePriority
	{ $current=$iv_rulePriority.current; }
	EOF;

// Rule Priority
rulePriority returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='@Priority'
		{
			newLeafNode(otherlv_0, grammarAccess.getPriorityAccess().getPriorityKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPriorityAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_priorityInt_2_0=RULE_INT
				{
					newLeafNode(lv_priorityInt_2_0, grammarAccess.getPriorityAccess().getPriorityIntINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPriorityRule());
					}
					setWithLastConsumed(
						$current,
						"priorityInt",
						lv_priorityInt_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPriorityAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleSelect
entryRuleSelect returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectRule()); }
	iv_ruleSelect=ruleSelect
	{ $current=$iv_ruleSelect.current; }
	EOF;

// Rule Select
ruleSelect returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='select'
			{
				newLeafNode(otherlv_0, grammarAccess.getSelectAccess().getSelectKeyword_0_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectAccess().getSelectAttributesSelectAttributesDefinitionParserRuleCall_0_1_0_0());
						}
						lv_selectAttributes_1_0=ruleSelectAttributesDefinition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectRule());
							}
							add(
								$current,
								"selectAttributes",
								lv_selectAttributes_1_0,
								"org.xtext.example.mydsl.Esper.SelectAttributesDefinition");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2='as'
					{
						newLeafNode(otherlv_2, grammarAccess.getSelectAccess().getAsKeyword_0_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSelectAccess().getAliasValidIDParserRuleCall_0_1_1_1_0());
							}
							lv_alias_3_0=ruleValidID
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSelectRule());
								}
								add(
									$current,
									"alias",
									lv_alias_3_0,
									"org.xtext.example.mydsl.Esper.ValidID");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)+
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getSelectAccess().getCommaKeyword_0_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSelectAccess().getSelectAttributesSelectAttributesDefinitionParserRuleCall_0_2_1_0());
						}
						lv_selectAttributes_5_0=ruleSelectAttributesDefinition
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSelectRule());
							}
							add(
								$current,
								"selectAttributes",
								lv_selectAttributes_5_0,
								"org.xtext.example.mydsl.Esper.SelectAttributesDefinition");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6='as'
					{
						newLeafNode(otherlv_6, grammarAccess.getSelectAccess().getAsKeyword_0_2_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSelectAccess().getAliasValidIDParserRuleCall_0_2_2_1_0());
							}
							lv_alias_7_0=ruleValidID
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSelectRule());
								}
								add(
									$current,
									"alias",
									lv_alias_7_0,
									"org.xtext.example.mydsl.Esper.ValidID");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)*
		)
		    |
		(
			(
				lv_asterisk_8_0='*'
				{
					newLeafNode(lv_asterisk_8_0, grammarAccess.getSelectAccess().getAsteriskAsteriskKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectRule());
					}
					setWithLastConsumed($current, "asterisk", true, "*");
				}
			)
		)
	)
;

// Entry rule entryRuleKindSelectAttributesDefinition
entryRuleKindSelectAttributesDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKindSelectAttributesDefinitionRule()); }
	iv_ruleKindSelectAttributesDefinition=ruleKindSelectAttributesDefinition
	{ $current=$iv_ruleKindSelectAttributesDefinition.current; }
	EOF;

// Rule KindSelectAttributesDefinition
ruleKindSelectAttributesDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getKindSelectAttributesDefinitionAccess().getSingleSelectDefinitionSingleSelectDefinitionParserRuleCall_0_0());
				}
				lv_singleSelectDefinition_0_0=ruleSingleSelectDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKindSelectAttributesDefinitionRule());
					}
					set(
						$current,
						"singleSelectDefinition",
						lv_singleSelectDefinition_0_0,
						"org.xtext.example.mydsl.Esper.SingleSelectDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getKindSelectAttributesDefinitionAccess().getDefaultMethodDefaultMethodsParserRuleCall_1_0());
				}
				lv_defaultMethod_1_0=ruleDefaultMethods
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKindSelectAttributesDefinitionRule());
					}
					set(
						$current,
						"defaultMethod",
						lv_defaultMethod_1_0,
						"org.xtext.example.mydsl.Esper.DefaultMethods");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				lv_int_2_0=RULE_INT
				{
					newLeafNode(lv_int_2_0, grammarAccess.getKindSelectAttributesDefinitionAccess().getIntINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKindSelectAttributesDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"int",
						lv_int_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_string_3_0=RULE_STRING
				{
					newLeafNode(lv_string_3_0, grammarAccess.getKindSelectAttributesDefinitionAccess().getStringSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getKindSelectAttributesDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"string",
						lv_string_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleSelectAttributesDefinition
entryRuleSelectAttributesDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectAttributesDefinitionRule()); }
	iv_ruleSelectAttributesDefinition=ruleSelectAttributesDefinition
	{ $current=$iv_ruleSelectAttributesDefinition.current; }
	EOF;

// Rule SelectAttributesDefinition
ruleSelectAttributesDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectAttributesDefinitionAccess().getRightSideKindSelectAttributesDefinitionParserRuleCall_0_0());
				}
				lv_rightSide_0_0=ruleKindSelectAttributesDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectAttributesDefinitionRule());
					}
					add(
						$current,
						"rightSide",
						lv_rightSide_0_0,
						"org.xtext.example.mydsl.Esper.KindSelectAttributesDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectAttributesDefinitionAccess().getOperatorOperatorsEnumRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectAttributesDefinitionRule());
						}
						add(
							$current,
							"operator",
							lv_operator_1_0,
							"org.xtext.example.mydsl.Esper.Operators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSelectAttributesDefinitionAccess().getLeftSideKindSelectAttributesDefinitionParserRuleCall_1_1_0());
					}
					lv_leftSide_2_0=ruleKindSelectAttributesDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelectAttributesDefinitionRule());
						}
						add(
							$current,
							"leftSide",
							lv_leftSide_2_0,
							"org.xtext.example.mydsl.Esper.KindSelectAttributesDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSingleSelectDefinition
entryRuleSingleSelectDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleSelectDefinitionRule()); }
	iv_ruleSingleSelectDefinition=ruleSingleSelectDefinition
	{ $current=$iv_ruleSingleSelectDefinition.current; }
	EOF;

// Rule SingleSelectDefinition
ruleSingleSelectDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleSelectDefinitionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSingleSelectDefinitionAccess().getEventSingleDefinitionCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getSingleSelectDefinitionAccess().getFullStopKeyword_1());
		}
		(
			(
				(
					lv_attribute_2_0=RULE_ID
					{
						newLeafNode(lv_attribute_2_0, grammarAccess.getSingleSelectDefinitionAccess().getAttributeIDTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleSelectDefinitionRule());
						}
						addWithLastConsumed(
							$current,
							"attribute",
							lv_attribute_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			    |
			otherlv_3='*'
			{
				newLeafNode(otherlv_3, grammarAccess.getSingleSelectDefinitionAccess().getAsteriskKeyword_2_1());
			}
		)
	)
;

// Entry rule entryRuleFrom
entryRuleFrom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFromRule()); }
	iv_ruleFrom=ruleFrom
	{ $current=$iv_ruleFrom.current; }
	EOF;

// Rule From
ruleFrom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='from'
		{
			newLeafNode(otherlv_0, grammarAccess.getFromAccess().getFromKeyword_0());
		}
		(
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getFromRule());
							}
						}
						otherlv_1=RULE_ID
						{
							newLeafNode(otherlv_1, grammarAccess.getFromAccess().getEventEventCrossReference_1_0_0_0());
						}
					)
				)
				(
					(
						otherlv_2='('
						{
							newLeafNode(otherlv_2, grammarAccess.getFromAccess().getLeftParenthesisKeyword_1_0_1_0_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getFromAccess().getAnythingAnythingParserRuleCall_1_0_1_0_1_0());
								}
								lv_anything_3_0=ruleAnything
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getFromRule());
									}
									set(
										$current,
										"anything",
										lv_anything_3_0,
										"org.xtext.example.mydsl.Esper.Anything");
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_4=')'
						{
							newLeafNode(otherlv_4, grammarAccess.getFromAccess().getRightParenthesisKeyword_1_0_1_0_2());
						}
					)
					    |
					(
						otherlv_5='.'
						{
							newLeafNode(otherlv_5, grammarAccess.getFromAccess().getFullStopKeyword_1_0_1_1_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getFromAccess().getAnythingAnythingParserRuleCall_1_0_1_1_1_0());
								}
								lv_anything_6_0=ruleAnything
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getFromRule());
									}
									set(
										$current,
										"anything",
										lv_anything_6_0,
										"org.xtext.example.mydsl.Esper.Anything");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getFromAccess().getPatternPatternParserRuleCall_1_1_0());
					}
					lv_pattern_7_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFromRule());
						}
						set(
							$current,
							"pattern",
							lv_pattern_7_0,
							"org.xtext.example.mydsl.Esper.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
		}
		otherlv_1='['
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternAccess().getLeftSquareBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getJoinFollowByJoinFollowByParserRuleCall_2_0());
				}
				lv_joinFollowBy_2_0=ruleJoinFollowBy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"joinFollowBy",
						lv_joinFollowBy_2_0,
						"org.xtext.example.mydsl.Esper.JoinFollowBy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getPatternAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_4='.'
			{
				newLeafNode(otherlv_4, grammarAccess.getPatternAccess().getFullStopKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPatternAccess().getWinWinParserRuleCall_4_1_0());
					}
					lv_win_5_0=ruleWin
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPatternRule());
						}
						set(
							$current,
							"win",
							lv_win_5_0,
							"org.xtext.example.mydsl.Esper.Win");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleJoinFollowBy
entryRuleJoinFollowBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinFollowByRule()); }
	iv_ruleJoinFollowBy=ruleJoinFollowBy
	{ $current=$iv_ruleJoinFollowBy.current; }
	EOF;

// Rule JoinFollowBy
ruleJoinFollowBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinFollowByAccess().getFollowsByJoinListAbstractFollowByParserRuleCall_0_0());
				}
				lv_followsByJoinList_0_0=ruleAbstractFollowBy
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinFollowByRule());
					}
					add(
						$current,
						"followsByJoinList",
						lv_followsByJoinList_0_0,
						"org.xtext.example.mydsl.Esper.AbstractFollowBy");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinFollowByAccess().getOperatorOperatorsEnumRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleOperators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinFollowByRule());
						}
						add(
							$current,
							"operator",
							lv_operator_1_0,
							"org.xtext.example.mydsl.Esper.Operators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getJoinFollowByAccess().getFollowsByJoinListAbstractFollowByParserRuleCall_1_1_0());
					}
					lv_followsByJoinList_2_0=ruleAbstractFollowBy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJoinFollowByRule());
						}
						add(
							$current,
							"followsByJoinList",
							lv_followsByJoinList_2_0,
							"org.xtext.example.mydsl.Esper.AbstractFollowBy");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAbstractFollowBy
entryRuleAbstractFollowBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractFollowByRule()); }
	iv_ruleAbstractFollowBy=ruleAbstractFollowBy
	{ $current=$iv_ruleAbstractFollowBy.current; }
	EOF;

// Rule AbstractFollowBy
ruleAbstractFollowBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				((
					ruleFollowBy
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getAbstractFollowByAccess().getFollowByFollowByParserRuleCall_0_0_0());
					}
					lv_followBy_0_0=ruleFollowBy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAbstractFollowByRule());
						}
						set(
							$current,
							"followBy",
							lv_followBy_0_0,
							"org.xtext.example.mydsl.Esper.FollowBy");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_1='('
				{
					newLeafNode(otherlv_1, grammarAccess.getAbstractFollowByAccess().getLeftParenthesisKeyword_0_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAbstractFollowByAccess().getFollowByFollowByParserRuleCall_0_1_1_0());
						}
						lv_followBy_2_0=ruleFollowBy
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAbstractFollowByRule());
							}
							set(
								$current,
								"followBy",
								lv_followBy_2_0,
								"org.xtext.example.mydsl.Esper.FollowBy");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3=')'
				{
					newLeafNode(otherlv_3, grammarAccess.getAbstractFollowByAccess().getRightParenthesisKeyword_0_1_2());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAbstractFollowByAccess().getWherePartFollowByWhereParserRuleCall_1_0());
				}
				lv_wherePart_4_0=ruleFollowByWhere
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbstractFollowByRule());
					}
					set(
						$current,
						"wherePart",
						lv_wherePart_4_0,
						"org.xtext.example.mydsl.Esper.FollowByWhere");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFollowBy
entryRuleFollowBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowByRule()); }
	iv_ruleFollowBy=ruleFollowBy
	{ $current=$iv_ruleFollowBy.current; }
	EOF;

// Rule FollowBy
ruleFollowBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFollowByAccess().getLeftSideTerminalExpressionParserRuleCall_0_0());
				}
				lv_leftSide_0_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFollowByRule());
					}
					set(
						$current,
						"leftSide",
						lv_leftSide_0_0,
						"org.xtext.example.mydsl.Esper.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('->')=>
				otherlv_1='->'
				{
					newLeafNode(otherlv_1, grammarAccess.getFollowByAccess().getHyphenMinusGreaterThanSignKeyword_1_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFollowByAccess().getRightSideTerminalExpressionParserRuleCall_1_1_0());
					}
					lv_rightSide_2_0=ruleTerminalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFollowByRule());
						}
						add(
							$current,
							"rightSide",
							lv_rightSide_2_0,
							"org.xtext.example.mydsl.Esper.TerminalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_every_0_0='every'
					{
						newLeafNode(lv_every_0_0, grammarAccess.getTerminalExpressionAccess().getEveryEveryKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
						setWithLastConsumed($current, "every", true, "every");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalExpressionAccess().getEveryExpressionFollowByParserRuleCall_0_1_0());
					}
					lv_everyExpression_1_0=ruleFollowBy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
						}
						set(
							$current,
							"everyExpression",
							lv_everyExpression_1_0,
							"org.xtext.example.mydsl.Esper.FollowBy");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_parenthesis_2_0='('
					{
						newLeafNode(lv_parenthesis_2_0, grammarAccess.getTerminalExpressionAccess().getParenthesisLeftParenthesisKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getTerminalExpressionRule());
						}
						setWithLastConsumed($current, "parenthesis", true, "(");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTerminalExpressionAccess().getBetweenParenthesisFollowByParserRuleCall_1_1_0());
					}
					lv_betweenParenthesis_3_0=ruleFollowBy
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
						}
						set(
							$current,
							"betweenParenthesis",
							lv_betweenParenthesis_3_0,
							"org.xtext.example.mydsl.Esper.FollowBy");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTerminalExpressionAccess().getSingleDefinitionSingleDefinitionParserRuleCall_2_0());
				}
				lv_singleDefinition_5_0=ruleSingleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTerminalExpressionRule());
					}
					set(
						$current,
						"singleDefinition",
						lv_singleDefinition_5_0,
						"org.xtext.example.mydsl.Esper.SingleDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSingleDefinition
entryRuleSingleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleDefinitionRule()); }
	iv_ruleSingleDefinition=ruleSingleDefinition
	{ $current=$iv_ruleSingleDefinition.current; }
	EOF;

// Rule SingleDefinition
ruleSingleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				((
					RULE_ID
				)
				)=>
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getSingleDefinitionAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSingleDefinitionRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getSingleDefinitionAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSingleDefinitionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSingleDefinitionAccess().getSimpleEventsKindOfEventCrossReference_1_0());
				}
			)
		)
		(
			(
				('(')=>
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getSingleDefinitionAccess().getLeftParenthesisKeyword_2_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleDefinitionAccess().getAnythingAnythingParserRuleCall_2_1_0());
					}
					lv_anything_4_0=ruleAnything
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleDefinitionRule());
						}
						set(
							$current,
							"anything",
							lv_anything_4_0,
							"org.xtext.example.mydsl.Esper.Anything");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getSingleDefinitionAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleWin
entryRuleWin returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWinRule()); }
	iv_ruleWin=ruleWin
	{ $current=$iv_ruleWin.current; }
	EOF;

// Rule Win
ruleWin returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='win'
		{
			newLeafNode(otherlv_0, grammarAccess.getWinAccess().getWinKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getWinAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWinAccess().getDefaultMethodDefaultMethodsParserRuleCall_2_0());
				}
				lv_defaultMethod_2_0=ruleDefaultMethods
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWinRule());
					}
					set(
						$current,
						"defaultMethod",
						lv_defaultMethod_2_0,
						"org.xtext.example.mydsl.Esper.DefaultMethods");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFollowByWhere
entryRuleFollowByWhere returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFollowByWhereRule()); }
	iv_ruleFollowByWhere=ruleFollowByWhere
	{ $current=$iv_ruleFollowByWhere.current; }
	EOF;

// Rule FollowByWhere
ruleFollowByWhere returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFollowByWhereAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getFollowByWhereAccess().getFollowByWhereParserRuleCall_0_1());
			}
			this_FollowByWhere_1=ruleFollowByWhere
			{
				$current = $this_FollowByWhere_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getFollowByWhereAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='where'
			{
				newLeafNode(otherlv_3, grammarAccess.getFollowByWhereAccess().getWhereKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFollowByWhereAccess().getTimerTimerParserRuleCall_1_1_0());
					}
					lv_timer_4_0=ruleTimer
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFollowByWhereRule());
						}
						set(
							$current,
							"timer",
							lv_timer_4_0,
							"org.xtext.example.mydsl.Esper.Timer");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTimer
entryRuleTimer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimerRule()); }
	iv_ruleTimer=ruleTimer
	{ $current=$iv_ruleTimer.current; }
	EOF;

// Rule Timer
ruleTimer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='timer'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimerAccess().getTimerKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimerAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTimerAccess().getDefaultMethodDefaultMethodsParserRuleCall_2_0());
				}
				lv_defaultMethod_2_0=ruleDefaultMethods
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimerRule());
					}
					set(
						$current,
						"defaultMethod",
						lv_defaultMethod_2_0,
						"org.xtext.example.mydsl.Esper.DefaultMethods");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGroupBy
entryRuleGroupBy returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGroupByRule()); }
	iv_ruleGroupBy=ruleGroupBy
	{ $current=$iv_ruleGroupBy.current; }
	EOF;

// Rule GroupBy
ruleGroupBy returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='group'
		{
			newLeafNode(otherlv_0, grammarAccess.getGroupByAccess().getGroupKeyword_0());
		}
		otherlv_1='by'
		{
			newLeafNode(otherlv_1, grammarAccess.getGroupByAccess().getByKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGroupByAccess().getAnythingAnythingParserRuleCall_2_0());
				}
				lv_anything_2_0=ruleAnything
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGroupByRule());
					}
					set(
						$current,
						"anything",
						lv_anything_2_0,
						"org.xtext.example.mydsl.Esper.Anything");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHaving
entryRuleHaving returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHavingRule()); }
	iv_ruleHaving=ruleHaving
	{ $current=$iv_ruleHaving.current; }
	EOF;

// Rule Having
ruleHaving returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='having'
		{
			newLeafNode(otherlv_0, grammarAccess.getHavingAccess().getHavingKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHavingAccess().getDefaultMethodDefaultMethodsParserRuleCall_1_0());
				}
				lv_defaultMethod_1_0=ruleDefaultMethods
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHavingRule());
					}
					set(
						$current,
						"defaultMethod",
						lv_defaultMethod_1_0,
						"org.xtext.example.mydsl.Esper.DefaultMethods");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHavingAccess().getOperatorOperatorsEnumRuleCall_2_0());
				}
				lv_operator_2_0=ruleOperators
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHavingRule());
					}
					set(
						$current,
						"operator",
						lv_operator_2_0,
						"org.xtext.example.mydsl.Esper.Operators");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHavingAccess().getAnythingAnythingParserRuleCall_3_0());
				}
				lv_anything_3_0=ruleAnything
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHavingRule());
					}
					set(
						$current,
						"anything",
						lv_anything_3_0,
						"org.xtext.example.mydsl.Esper.Anything");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefaultMethods
entryRuleDefaultMethods returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultMethodsRule()); }
	iv_ruleDefaultMethods=ruleDefaultMethods
	{ $current=$iv_ruleDefaultMethods.current; }
	EOF;

// Rule DefaultMethods
ruleDefaultMethods returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultMethodsAccess().getNameNameMethodParserRuleCall_0_0());
				}
				lv_name_0_0=ruleNameMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultMethodsRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.xtext.example.mydsl.Esper.NameMethod");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultMethodsAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefaultMethodsAccess().getAnythingAnythingParserRuleCall_2_0());
				}
				lv_anything_2_0=ruleAnything
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefaultMethodsRule());
					}
					set(
						$current,
						"anything",
						lv_anything_2_0,
						"org.xtext.example.mydsl.Esper.Anything");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getDefaultMethodsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValidIDRule()); }
	iv_ruleValidID=ruleValidID
	{ $current=$iv_ruleValidID.current.getText(); }
	EOF;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getValidIDAccess().getNameMethodParserRuleCall_1());
		}
		this_NameMethod_1=ruleNameMethod
		{
			$current.merge(this_NameMethod_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNameMethod
entryRuleNameMethod returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNameMethodRule()); }
	iv_ruleNameMethod=ruleNameMethod
	{ $current=$iv_ruleNameMethod.current.getText(); }
	EOF;

// Rule NameMethod
ruleNameMethod returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='avg'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getAvgKeyword_0());
		}
		    |
		kw='current_timestamp'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getCurrent_timestampKeyword_1());
		}
		    |
		kw='count'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getCountKeyword_2());
		}
		    |
		kw='max'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getMaxKeyword_3());
		}
		    |
		kw='within'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getWithinKeyword_4());
		}
		    |
		kw='time_batch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getTime_batchKeyword_5());
		}
		    |
		kw='time'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getNameMethodAccess().getTimeKeyword_6());
		}
	)
;

// Entry rule entryRuleAnything
entryRuleAnything returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnythingRule()); }
	iv_ruleAnything=ruleAnything
	{ $current=$iv_ruleAnything.current; }
	EOF;

// Rule Anything
ruleAnything returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAnythingAccess().getAnythingAction_0(),
					$current);
			}
		)
		(
			((
				RULE_ID
				    |
				RULE_INT
				    |
				RULE_STRING
				    |
				'.'
				    |
				(
					(
						ruleOperators
					)
				)
				    |
				(
					(
						ruleExtraParenthesisRule
					)
				)
				    |
				'where'
				    |
				RULE_ANY_OTHER
			)
			)=>
			(
				this_ID_1=RULE_ID
				{
					newLeafNode(this_ID_1, grammarAccess.getAnythingAccess().getIDTerminalRuleCall_1_0_0());
				}
				    |
				this_INT_2=RULE_INT
				{
					newLeafNode(this_INT_2, grammarAccess.getAnythingAccess().getINTTerminalRuleCall_1_0_1());
				}
				    |
				this_STRING_3=RULE_STRING
				{
					newLeafNode(this_STRING_3, grammarAccess.getAnythingAccess().getSTRINGTerminalRuleCall_1_0_2());
				}
				    |
				otherlv_4='.'
				{
					newLeafNode(otherlv_4, grammarAccess.getAnythingAccess().getFullStopKeyword_1_0_3());
				}
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAnythingAccess().getOperatorOperatorsEnumRuleCall_1_0_4_0());
						}
						lv_operator_5_0=ruleOperators
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAnythingRule());
							}
							add(
								$current,
								"operator",
								lv_operator_5_0,
								"org.xtext.example.mydsl.Esper.Operators");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAnythingAccess().getExtraParenthesisExtraParenthesisRuleParserRuleCall_1_0_5_0());
						}
						lv_extraParenthesis_6_0=ruleExtraParenthesisRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAnythingRule());
							}
							add(
								$current,
								"extraParenthesis",
								lv_extraParenthesis_6_0,
								"org.xtext.example.mydsl.Esper.ExtraParenthesisRule");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				otherlv_7='where'
				{
					newLeafNode(otherlv_7, grammarAccess.getAnythingAccess().getWhereKeyword_1_0_6());
				}
				    |
				this_ANY_OTHER_8=RULE_ANY_OTHER
				{
					newLeafNode(this_ANY_OTHER_8, grammarAccess.getAnythingAccess().getANY_OTHERTerminalRuleCall_1_0_7());
				}
			)
		)*
	)
;

// Entry rule entryRuleExtraParenthesisRule
entryRuleExtraParenthesisRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExtraParenthesisRuleRule()); }
	iv_ruleExtraParenthesisRule=ruleExtraParenthesisRule
	{ $current=$iv_ruleExtraParenthesisRule.current; }
	EOF;

// Rule ExtraParenthesisRule
ruleExtraParenthesisRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExtraParenthesisRuleAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExtraParenthesisRuleAccess().getAnythingParserRuleCall_1());
		}
		this_Anything_1=ruleAnything
		{
			$current = $this_Anything_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getExtraParenthesisRuleAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Rule Operators
ruleOperators returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getOperatorsAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getOperatorsAccess().getEqualEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<'
			{
				$current = grammarAccess.getOperatorsAccess().getLessThanEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getOperatorsAccess().getLessThanEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>'
			{
				$current = grammarAccess.getOperatorsAccess().getMoreThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getOperatorsAccess().getMoreThanEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<='
			{
				$current = grammarAccess.getOperatorsAccess().getLessEqualThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getOperatorsAccess().getLessEqualThanEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getOperatorsAccess().getMoreEqualThanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getOperatorsAccess().getMoreEqualThanEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='and'
			{
				$current = grammarAccess.getOperatorsAccess().getAndEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getOperatorsAccess().getAndEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='or'
			{
				$current = grammarAccess.getOperatorsAccess().getOrEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getOperatorsAccess().getOrEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='between'
			{
				$current = grammarAccess.getOperatorsAccess().getBetweenEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getOperatorsAccess().getBetweenEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='in'
			{
				$current = grammarAccess.getOperatorsAccess().getInEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getOperatorsAccess().getInEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='not'
			{
				$current = grammarAccess.getOperatorsAccess().getNotEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getOperatorsAccess().getNotEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='not in'
			{
				$current = grammarAccess.getOperatorsAccess().getNotInEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getOperatorsAccess().getNotInEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='+'
			{
				$current = grammarAccess.getOperatorsAccess().getPlusEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getOperatorsAccess().getPlusEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='-'
			{
				$current = grammarAccess.getOperatorsAccess().getMinusEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getOperatorsAccess().getMinusEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='*'
			{
				$current = grammarAccess.getOperatorsAccess().getMultiplicationEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getOperatorsAccess().getMultiplicationEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='is not'
			{
				$current = grammarAccess.getOperatorsAccess().getIsnotEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getOperatorsAccess().getIsnotEnumLiteralDeclaration_14());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
